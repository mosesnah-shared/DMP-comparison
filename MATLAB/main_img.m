% [Project]        DMP Comparison - Video Generation
% [Author]         Moses C. Nah
% [Creation Date]  Monday, Oct. 23th, 2022
%
% [Emails]         Moses C. Nah   : mosesnah@mit.edu

%% (--) INITIALIZATION

clear; close all; clc; workspace;

% Add the Libraries of 
addpath( 'MATLAB_Library/myUtils', 'MATLAB_Library/myGraphics' )

cd( fileparts( matlab.desktop.editor.getActiveFilename ) );     
myFigureConfig( 'fontsize',  20, ...
               'LineWidth',  10, ...
           'AxesLineWidth', 1.5, ...     For Grid line, axes line width etc.
              'markerSize',  25    )  
             
global c                                                                   % Setting color structure 'c' as global variable
c  = myColor(); 

global mode 
mode = "MOVEMENT"; % Either movement or motor or both to generate the images 

%% ==================================================================
%% (--) Goal directed Discrete Movement - Joint Space
% All Data generated with "main_joint_trajectory_discrete.py" script
clear data*; clc;

% ============================ Movement Primitives ==================================== %
file_name_move1 = '../results/discrete_move_joint_space/movement/dmp_joint1.mat';
file_name_move2 = '../results/discrete_move_joint_space/movement/dmp_joint2.mat';
file_name_move3 = '../results/discrete_move_joint_space/movement/ctrl_joint_dmp.mat';

data_move{ 1 } = load( file_name_move1 );       % DMP For the first  joint
data_move{ 2 } = load( file_name_move2 );       % DMP For the second joint
data_move{ 3 } = load( file_name_move3 );       % The model for the inverse-dynamics model

t_arr_move = data_move{ 1 }.t_arr;
q_des = data_move{ 3 }.q_command;

% =============================== Motor Primitives ==================================== %
file_name_motor1 = '../results/discrete_move_joint_space/motor/ctrl_joint_imp.mat';

data_motor = load( file_name_motor1 );


[ q0_arr, dq0_arr, ddq0_arr ] = min_jerk_traj( data_motor.t_arr, data_motor.q0i, ...
                                               data_motor.q0f, data_motor.D, data_motor.ti );

clear file*

% ======================================================================== %
% Plot1: Dynamic Movement Primitives, joint 1
subplot( 2, 2, 1 )
hold on

% The desired trajectory which is the minimum-jerk 
plot( t_arr_move, data_move{ 1 }.y_arr, 'linewidth', 4,  'color', c.blue );
plot( t_arr_move, q0_arr( 1, : ), 'color', 'k', 'linewidth', 4, 'linestyle', '--' );
set( gca, 'xlim', [ 0, 4 ], 'ylim', [0, 1.1], 'fontsize', 30 )
ylabel( 'Joint1, $q_1(t)$ (rad)', 'fontsize', 30 )
title( 'Dynamic Movement Primitives', 'fontsize', 30 )

% ======================================================================== %
% Plot2: Dynamic Movement Primitives, joint 2
subplot( 2, 2, 3 )
hold on

plot( t_arr_move, data_move{ 2 }.y_arr, 'linewidth', 4,  'color', c.blue );
plot( t_arr_move, q0_arr( 2, : ), 'color', 'k', 'linewidth', 4, 'linestyle', '--' );
set( gca, 'xlim', [ 0, 4 ], 'ylim', [0, 1.1], 'fontsize', 30 )
xlabel( '$t$ (sec)', 'fontsize', 30 )
ylabel( 'Joint2, $q_2(t)$ (rad)', 'fontsize', 30 )

% ======================================================================== %
% Plot3: Elementary Dynamic Actions, joint 1
subplot( 2, 2, 2 )
hold on
plot( data_motor.t_arr, data_motor.q_arr( 1, : ), 'linewidth', 4,  'color', c.orange );
plot( data_motor.t_arr, q0_arr( 1, : ), 'color', 'k', 'linewidth', 4, 'linestyle', '--' );
set( gca, 'xlim', [ 0, 4 ], 'ylim', [0, 1.1], 'fontsize', 30 )
title( 'Elementary Dynamic Actions', 'fontsize', 30 )


% ======================================================================== %
% Plot3: Elementary Dynamic Actions, joint 2
subplot( 2, 2, 4 )
hold on
plot( data_motor.t_arr, data_motor.q_arr( 2, : ), 'linewidth', 4,  'color', c.orange );
plot( data_motor.t_arr, q0_arr( 2, : ), 'color', 'k', 'linewidth', 4, 'linestyle', '--' );
set( gca, 'xlim', [ 0, 4 ], 'ylim', [0, 1.1], 'fontsize', 30 )
xlabel( '$t$ (sec)', 'fontsize', 30 )


mySaveFig( gcf, 'goal_directed_discrete_joint_space' )

%% ==================================================================
%% (--) Goal directed Discrete Movement - Task-Space
% All data generated by "main_task_trajectory_no_redund.py"
clear data*; clc;

% The number of targets
N = 8;
% c_arr = [ c.blue; c.orange; c.green; c.purple; c.roseRed; c.peach; c.pink; c.blue_sky ];


% ============================ Movement Primitives ==================================== %
data_move = cell( 1,N ); 

for i = 1 : 8
    file_name = ['../results/discrete_move_task_space_wo_redund/movement/target', num2str( i ), '/ctrl_task_dmp.mat' ];
    data_move{ i } = load( file_name );
end

% =============================== Motor Primitives ==================================== %
data_motor = cell( 1,N );

for i = 1 : 8
    file_name = ['../results/discrete_move_task_space_wo_redund/motor/target', num2str( i ), '/ctrl_task_imp.mat' ];
    data_motor{ i } = load( file_name );
end

% ======================================================================== %
% Plot1: Dynamic Movement Primitives
subplot( 1, 2, 1 )
hold on

% Get initial position of the end-effector
pEEi = data_move{ 1 }.p_arr( :, 1 );
r = 0.5;
for i = 1 : 8
    plot( r * cos( ( i - 1 ) * pi/4 ) , r * sin( ( i - 1 ) * pi/4 ), 'o', 'markersize', 30, 'markerfacecolor', c.blue, 'markeredgecolor', c.blue, 'linewidth', 3 )
    plot( data_move{ i }.p_arr( 1, : ) - pEEi( 1 ), data_move{ i }.p_arr( 2, : ) - pEEi( 2 ), 'linewidth', 3, 'color', c.blue )
    plot( data_move{ i }.p_command(  1, : ) - pEEi( 1 ), data_move{ i }.p_command( 2, : ) - pEEi( 2 ), 'linewidth', 5, 'color', c.black, 'linestyle',  '--' )
end

xlabel( '$X$ (m)', 'fontsize', 30 )
ylabel( '$Y$ (m)', 'fontsize', 30 )
title( 'Dynamic Movement Primitives', 'fontsize', 30 )
axis equal
set( gca, 'xlim', [-0.6, 0.600001], 'ylim', [-0.6, 0.600001], 'xtick', [-0.6, -0.3, 0.0, 0.3, 0.6], 'ytick', [-0.6, -0.3, 0.0, 0.3, 0.6] ) 


% ======================================================================== %
% Plot2: Elementary Dynamic Actions
subplot( 1, 2, 2)
hold on
for i = 1 : 8
    plot( r * cos( ( i - 1 ) * pi/4 ) , r * sin( ( i - 1 ) * pi/4 ), 'o', 'markersize', 30, 'markerfacecolor', c.orange, 'markeredgecolor', c.orange, 'linewidth', 3 )
    plot( data_motor{ i }.p_arr( 1, : ) - pEEi( 1 ), data_motor{ i }.p_arr - pEEi( 2 ), 'linewidth', 3, 'color', c.orange )
    plot( data_motor{ i }.p0_arr( 1, : ) - pEEi( 1 ), data_motor{ i }.p0_arr( 2, : ) - pEEi( 2 ), 'linewidth', 5, 'color', c.black, 'linestyle',  '--' )
end

xlabel( '$X$ (m)', 'fontsize', 30 )
ylabel( '$Y$ (m)', 'fontsize', 30 )
title( 'Elementary Dynamic Actions', 'fontsize', 30 )
axis equal
set( gca, 'xlim', [-0.6, 0.600001], 'ylim', [-0.6, 0.600001], 'xtick', [-0.6, -0.3, 0.0, 0.3, 0.6], 'ytick', [-0.6, -0.3, 0.0, 0.3, 0.6] ) 

mySaveFig( gcf, 'goal_directed_discrete_task_space' )


%% ==================================================================
%% (--) Goal directed Discrete Movement - With Redundancy #1
% All data generated by "main_task_trajectory_redund.py"
clear data*; clc;

% ============================ Movement Primitives ==================================== %

file_name1 = '../results/discrete_move_task_space_w_redund/movement/ctrl_task_dmp.mat';
file_name2 = '../results/discrete_move_task_space_w_redund/movement/dmpx.mat';
file_name3 = '../results/discrete_move_task_space_w_redund/movement/dmpy.mat';

data_move{ 1 }  = load( file_name1 );
data_move{ 2 }  = load( file_name2 );
data_move{ 3 }  = load( file_name3 );


% =============================== Motor Primitives ==================================== %
file_name1 = '../results/discrete_move_task_space_w_redund/motor/ctrl_joint_imp.mat';
file_name2 = '../results/discrete_move_task_space_w_redund/motor/ctrl_task_imp.mat';
data_motor{ 1 } = load( file_name1 );
data_motor{ 2 } = load( file_name2 );

clear file*

subplot( 2, 2, [1,2] )
hold on

% The start and end of the movement
p0i =  data_motor{ 2 }.p0i;  p0f =  data_motor{ 2 }.p0f;

plot( p0i( 1 : 2 ), p0f( 1 : 2 ), 'linewidth', 6, 'linestyle', '--', 'color', c.black )


if mode == "MOVEMENT" || mode == "BOTH"
    plot(  data_move{ 1 }.p_arr( 1, : ),  data_move{ 1 }.p_arr( 2, : ), 'linewidth', 3, 'color', c.blue )
end

if mode == "MOTOR"    || mode == "BOTH"
    plot( data_motor{ 2 }.p_arr( 1 , : ), data_motor{ 2 }.p_arr( 2 , : ), 'linewidth',3, 'color', c.orange )
end
set( gca, 'xlim', [-.2, 3.2], 'ylim', [ 2.9, 3.1], 'fontsize', 30 )

% Adding text onto the figure
text( p0i( 1 )    , p0i( 2 )- 0.02, 'Start $\mathbf{p}_i$' )
text( p0f( 1 )-0.2, p0f( 2 ) +0.02, 'Goal $\mathbf{g}$'    )
scatter( p0i( 1 ), p0i( 2 ), 300, 'square', 'markerfacecolor', c.black, 'markeredgecolor', c.black, 'markerfacealpha', 0.8 )
scatter( p0f( 1 ), p0f( 2 ), 300,      'o', 'markerfacecolor', c.black, 'markeredgecolor', c.black, 'markerfacealpha', 0.8 )

if mode == "MOVEMENT" 
    legend( '', 'Dynamic Movement Primitives', 'location', 'northwest', 'fontsize', 30  )
elseif mode == "MOTOR"
    legend( '', 'Elementary Dynamic Actions'   , 'location', 'northwest', 'fontsize', 30  )
else
    legend( '', 'Dynamic Movement Primitives', 'Elementary Dynamic Actions', 'location', 'northwest', 'fontsize', 30  )
end


if mode == "MOVEMENT" || mode == "BOTH"
    subplot( 2, 2, 3 )
    hold on
    plot( p0i( 1 : 2 ), p0f( 1 : 2 ), 'linewidth', 4, 'linestyle', '--', 'color', c.black )

    % Get the x, y position of the joints 
    q_abs = cumsum( data_move{1}.q_arr , 1 );
    x_arr = cumsum( cos( q_abs ), 1 );
    y_arr = cumsum( sin( q_abs ), 1 );

    alpha_arr = [0.2, 0.3, 0.7, 1.0];
    idx_arr   = [1, 1000, 1400, 4000];
    for i = 1 : length( idx_arr )
        idx = idx_arr( i );
        alpha = alpha_arr( i );
        scatter( [ 0, x_arr( 1:end-1, idx  )' ] , [ 0, y_arr(1:end-1, idx )' ], 200, 'markerfacecolor', c.black, 'markeredgecolor', c.black, 'MarkerFaceAlpha', alpha,'MarkerEdgeAlpha',alpha  )
        p2 = plot( [ 0, x_arr( :, idx )' ] , [ 0, y_arr( :, idx)' ], 'color', c.black, 'linewidth', 4 );
        p2.Color( 4 ) = alpha;
        scatter( x_arr( end, idx ), y_arr( end, idx  ),  600,  'markerfacecolor', c.blue, 'markeredgecolor', c.blue, 'MarkerFaceAlpha', alpha,'MarkerEdgeAlpha',alpha  )

    end

    set( gca, 'xlim', [ -1.0, 4.0] , 'ylim', [-1.0, 4.0], 'xticklabel', {}, 'yticklabel', {} )
    axis equal
    title( 'Dynamic Movement Primitives', 'fontsize', 30 )
    xlabel( '$X$ (m)', 'fontsize', 35 )
    ylabel( '$Y$ (m)', 'fontsize', 35 )    
end

if mode == "MOTOR" || mode == "BOTH"
    subplot( 2, 2, 4)
    hold on
    plot( p0i( 1 : 2 ), p0f( 1 : 2 ), 'linewidth', 4, 'linestyle', '--', 'color', c.black )

    % Get the x, y position of the joints 
    q_abs = cumsum( data_motor{1}.q_arr , 1 );
    x_arr = cumsum( cos( q_abs ), 1 );
    y_arr = cumsum( sin( q_abs ), 1 );

    alpha_arr = [0.2, 0.3, 0.7, 1.0];
    idx_arr   = [1, 1000, 1400, 4000];
    for i = 1 : length( idx_arr )
        idx = idx_arr( i );
        alpha = alpha_arr( i );
        scatter( [ 0, x_arr( 1:end-1, idx  )' ] , [ 0, y_arr(1:end-1, idx )' ], 200, 'markerfacecolor', c.black, 'markeredgecolor', c.black, 'MarkerFaceAlpha', alpha,'MarkerEdgeAlpha',alpha  )
        p2 = plot( [ 0, x_arr( :, idx )' ] , [ 0, y_arr( :, idx)' ], 'color', c.black, 'linewidth', 4 );
        p2.Color( 4 ) = alpha;
        scatter( x_arr( end, idx ), y_arr( end, idx  ),  600,  'markerfacecolor', c.orange, 'markeredgecolor', c.orange, 'MarkerFaceAlpha', alpha,'MarkerEdgeAlpha',alpha  )

    end

    title( 'Elementary Dynamic Actions', 'fontsize', 30 )
    xlabel( '$X$ (m)', 'fontsize', 35 )
    ylabel( '$Y$ (m)', 'fontsize', 35 )
    set( gca, 'xlim', [ -1.0, 4.0] , 'ylim', [-1.0, 4.0], 'xticklabel', {}, 'yticklabel', {} )
    axis equal
end

mySaveFig( gcf, 'redundancy_end_effector' )


%% (--) Goal directed Discrete Movement - With Redundancy #2
% All data generated by "main_task_trajectory_redund.py"

% Data called from previous section
% Movement primitives, joint angle
subplot( 2, 2, 1 )
plot( data_move{1}.t_arr, data_move{1}.q_arr )
title( 'Dynamic Movement Primitives', 'fontsize', 30 )
ylabel( '$\mathbf{q}(t)$ (rad)' )
set( gca, 'fontsize', 30, 'xlim', [0, 4 ], 'ylim', [ -1, 2], 'xtick', [0, 0.3, 1.0, 2.0, 3.0, 4.0] )

% Movement primitives, joint velocity
subplot( 2, 2, 3 )
plot( data_move{1}.t_arr, data_move{1}.dq_arr )
xlabel( '$t$ (sec)' )
ylabel( '$\dot{\mathbf{q}}(t)$ (rad/s)' )
set( gca, 'fontsize', 30, 'xlim', [0, 4 ], 'ylim', [ -1, 0.5], 'xtick', [0, 0.3, 1.0, 2.0, 3.0, 4.0] )

% Motor primitives, joint angle
subplot( 2, 2, 2)
plot( data_motor{1}.t_arr, data_motor{1}.q_arr )
set( gca, 'fontsize', 30, 'xlim', [0, 4 ], 'ylim', [ -1, 2], 'xtick', [0, 0.3, 1.0, 2.0, 3.0, 4.0] )
title( 'Elementary Dynamic Actions', 'fontsize', 30 )

% Motor primitives, joint velocity
subplot( 2, 2, 4)
plot( data_motor{1}.t_arr, data_motor{1}.dq_arr )
xlabel( '$t$ (sec)' )
set( gca, 'fontsize', 30, 'xlim', [0, 4 ], 'ylim', [ -1, 0.5], 'xtick', [0, 0.3, 1.0, 2.0, 3.0, 4.0] )
legend( '$q_1$', '$q_2$', '$q_3$', '$q_4$', '$q_5$', 'location', 'southeast')
mySaveFig( gcf, 'redundancy_joint_trajs' )

%% ==================================================================
%% (--) Sequence of Discrete Movements #1
% All data generated by "main_sequence_movement.py"

clear data*; clc;

% ============================ Movement Primitives ==================================== %
file_name1 = '../results/sequence/movement/ctrl_task_dmp.mat';
file_name2 = '../results/sequence/movement/dmpx.mat';
file_name3 = '../results/sequence/movement/dmpy.mat';

data_move{ 1 }  = load( file_name1 );
data_move{ 2 }  = load( file_name2 );
data_move{ 3 }  = load( file_name3 );


% =============================== Motor Primitives ==================================== %
file_name1 = '../results/sequence/motor/ctrl_task_imp.mat';
data_motor{ 1 } = load( file_name1 );
clear file*

% Get the initial end-effector position 
g_old = data_motor{ 1 }.p0i( 1, : ) + [ -0.7, 0.7, 0. ];
g_new = g_old + [ 1.5, 0.5, 0. ];
 
subplot( 2, 2, [1,3] )
hold on

% Plotting the end-effector trace
if mode == "MOVEMENT" || mode == "BOTH"
    plot( data_move{ 1 }.p_arr( 1, : ), data_move{ 1 }.p_arr( 2, : ), 'linewidth', 4, 'color', c.blue)
end
if mode == "MOTOR" || mode == "BOTH"
    plot( data_motor{ 1 }.p_arr( 1, : ), data_motor{ 1 }.p_arr( 2, : ), 'linewidth', 4, 'color', c.orange  )
end

% The old/new goal location, as square markers 
scatter( g_old( 1 ), g_old( 2 ), 300, 'square', 'markerfacecolor', c.black, 'markeredgecolor', c.black, 'markerfacealpha', 0.3 )
scatter( g_new( 1 ), g_new( 2 ), 300, 'square', 'markerfacecolor', c.black, 'markeredgecolor', c.black, 'markerfacealpha', 0.8 )

% The initial location
scatter( data_motor{ 1 }.p0i( 1, 1 ), data_motor{ 1 }.p0i( 1, 2 ), 300, 'o', 'markerfacecolor', c.black, 'markeredgecolor', c.black )
xlabel( '$X$ (m)', 'fontsize', 35 )
ylabel( '$Y$ (m)', 'fontsize', 35 )
text( g_old( 1 ) - 0.1, g_old( 2 ) + 0.05, '$\mathbf{g}_{old}$' );
text( g_new( 1 ) - 0.1, g_new( 2 ) - 0.1, '$\mathbf{g}_{new}$' );
text( data_motor{ 1 }.p0i( 1, 1 ) +0.1,  data_motor{ 1 }.p0i( 1, 2 ), '$\mathbf{p}_{i}$' );

if mode == "MOVEMENT" 
    legend( 'Dynamic Movement Primitives', 'location', 'northwest', 'fontsize', 23)
elseif mode == "MOTOR"
    legend( 'Elementary Dynamic Actions', 'location', 'northwest', 'fontsize', 23  )
else
    legend( 'Dynamic Movement Primitives', 'Elementary Dynamic Actions', 'location', 'northwest', 'fontsize', 23  )
end


set( gca, 'fontsize', 30 )

if mode == "MOVEMENT" || mode == "BOTH"
    subplot( 2, 2, 2 )
    hold on

    % Get the x, y position of the joints 
    q_abs = cumsum( data_move{1}.q_arr , 1 );
    x_arr = cumsum( cos( q_abs ), 1 );
    y_arr = cumsum( sin( q_abs ), 1 );

    alpha_arr = [0.2, 0.4, 0.8, 1.0];
    idx_arr   = [1, 1000, 1800, 7000];
    for i = 1 : length( idx_arr )
        idx = idx_arr( i );
        alpha = alpha_arr( i );
        scatter( [ 0; x_arr( 1:end-1, idx ) ] , [ 0; y_arr( 1:end-1, idx ) ], 300, 'markerfacecolor', c.black, 'markeredgecolor', c.black, 'MarkerFaceAlpha', alpha,'MarkerEdgeAlpha',alpha  )
        p2 = plot( [ 0; x_arr( :, idx ) ] , [ 0; y_arr( :, idx ) ], 'color', c.black, 'linewidth', 4 );
        p2.Color( 4 ) = alpha;
        scatter( x_arr( end, idx ), y_arr( end, idx ),  900,  'markerfacecolor', c.blue, 'markeredgecolor', c.blue, 'MarkerFaceAlpha', alpha,'MarkerEdgeAlpha',alpha  )

    end
    plot( x_arr( 2, : ) , y_arr( 2, : ), 'color',c.blue, 'linewidth', 4 ) 
    scatter( g_old( 1 ), g_old( 2 ), 300, 'square', 'markerfacecolor', c.black, 'markeredgecolor', c.black, 'markerfacealpha', 0.3 )
    scatter( g_new( 1 ), g_new( 2 ), 300, 'square', 'markerfacecolor', c.black, 'markeredgecolor', c.black, 'markerfacealpha', 0.8 )

    text( g_old( 1 ) - 0.4, g_old( 2 ) + 0.2, '$\mathbf{g}_{old}$' );
    text( g_new( 1 ) + 0.2, g_new( 2 ) - 0.1, '$\mathbf{g}_{new}$' );

    
    set( gca, 'xticklabel', {}, 'yticklabel', {} ,'xlim', [ -1.0, 1.0], 'ylim', [-0.1, 1.9 ] )
    axis equal
    title( 'Dynamic Movement Primitives', 'fontsize', 30 )
    xlabel( '$X$ (m)', 'fontsize', 35 )
    ylabel( '$Y$ (m)', 'fontsize', 35 )    
end

if mode == "MOTOR" || mode == "BOTH"
    subplot( 2, 2, 4 )
    hold on
    q_abs = cumsum( data_motor{ 1 }.q_arr , 1 );
    x_arr = cumsum( cos( q_abs ), 1 );
    y_arr = cumsum( sin( q_abs ), 1 );

    alpha_arr = [0.2, 0.4, 0.8, 1.0];
    idx_arr   = [1, 800, 1050, 5000];
    for i = 1 : length( idx_arr )
        idx = idx_arr( i );
        alpha = alpha_arr( i );
        scatter( [ 0; x_arr( 1:end-1, idx ) ] , [ 0; y_arr( 1:end-1, idx ) ], 300, 'markerfacecolor', c.black, 'markeredgecolor', c.black, 'MarkerFaceAlpha', alpha,'MarkerEdgeAlpha',alpha  )
        p2 = plot( [ 0; x_arr( :, idx ) ] , [ 0; y_arr( :, idx ) ], 'color', c.black, 'linewidth', 4 );
        p2.Color( 4 ) = alpha;
        scatter( x_arr( end, idx ), y_arr( end, idx ),  900,  'markerfacecolor', c.orange, 'markeredgecolor', c.orange, 'MarkerFaceAlpha', alpha,'MarkerEdgeAlpha',alpha  )

    end
    plot( x_arr( 2, :) , y_arr( 2, : ), 'color',c.orange, 'linewidth', 4 ) 
    scatter( g_old( 1 ), g_old( 2 ), 300, 'square', 'markerfacecolor', c.black, 'markeredgecolor', c.black, 'markerfacealpha', 0.3 )
    scatter( g_new( 1 ), g_new( 2 ), 300, 'square', 'markerfacecolor', c.black, 'markeredgecolor', c.black, 'markerfacealpha', 0.8 )

    text( g_old( 1 ) - 0.4, g_old( 2 ) + 0.2, '$\mathbf{g}_{old}$' );
    text( g_new( 1 ) + 0.2, g_new( 2 ) - 0.1, '$\mathbf{g}_{new}$' );
    
    set( gca, 'xticklabel', {}, 'yticklabel', {},'xlim', [ -1.0, 1.0], 'ylim', [-0.1, 1.9 ] )
    axis equal
    title( 'Elementary Dynamic Actions', 'fontsize', 30 )
    xlabel( '$X$ (m)', 'fontsize', 35 )
    ylabel( '$Y$ (m)', 'fontsize', 35 )
end

mySaveFig( gcf, 'sequence_figure1' )


%% (--) Sequence of Discrete Movements #2
% All data generated by "main_sequence_movement.py"

% Data called from previous section
subplot( 2, 1, 1 )
hold on
ylabel( '$p_x(t)$ (m)', 'fontsize', 35 )

if mode == "MOVEMENT" || mode == "BOTH"
    plot( data_move{1}.t_arr, data_move{1}.p_arr( 1, : ), 'linewidth', 4, 'color', c.blue )
end

if mode == "MOTOR" || mode == "BOTH"
    plot( data_motor{1}.t_arr, data_motor{1}.p_arr( 1, : ), 'linewidth', 4, 'color', c.orange )
end    

xline( 0.5, 'linewidth', 2, 'linestyle', '-.' )
yline( g_new( 1 ), 'linewidth', 2, 'linestyle', '-.' )
set( gca, 'fontsize', 30, 'xlim', [0.0, 4], 'xtick', [ 0, 0.5, 1, 2, 3, 4 ], 'xticklabel', { '0', '$t_g$', '', 2, '', 4}, ...
                          'ytick', [ -0.5, 0.0, 0.5, g_new(1), 1.0 ], 'yticklabel', { '-0.5', '0.0', '0.5', '$g_{new,x}$', '' } )
                              

if mode == "MOVEMENT" 
    legend( 'Dynamic Movement Primitives', 'location', 'southeast', 'fontsize', 30)
elseif mode == "MOTOR"
    legend( 'Elementary Dynamic Actions', 'location', 'southeast', 'fontsize', 30  )
else
    legend( 'Dynamic Movement Primitives', 'Elementary Dynamic Actions', 'location', 'southeast', 'fontsize', 30 )
end

subplot( 2, 1, 2 )
hold on
xlabel( '$t$ (sec)', 'fontsize', 35 )
ylabel( '$p_y(t)$ (m)', 'fontsize', 35 )

if mode == "MOVEMENT" || mode == "BOTH"
    plot( data_move{1}.t_arr , data_move{1}.p_arr( 2, : ), 'linewidth', 4, 'color', c.blue )
end

if mode == "MOTOR" || mode == "BOTH"
    plot( data_motor{1}.t_arr, data_motor{1}.p_arr( 2, : ), 'linewidth', 4, 'color', c.orange )
end    
xline( 0.5, 'linewidth', 2, 'linestyle', '-.' )
yline( g_new( 2 ), 'linewidth', 2, 'linestyle', '-.' )
set( gca, 'fontsize', 30, 'xlim', [0, 4], 'xtick', [ 0, 0.5, 1, 2, 3, 4 ], 'xticklabel', { '0', '$t_g$', '', 2, '', 4}, ...
                                          'ytick', [ 0.5, 1.0, 1.5, g_new(2), 2.0 ], 'yticklabel', { '0.5', '1.0', '1.5', '$g_{new,y}$', '' })

if mode == "MOVEMENT" 
    legend( 'Dynamic Movement Primitives', 'location', 'southeast', 'fontsize', 30)
elseif mode == "MOTOR"
    legend( 'Elementary Dynamic Actions', 'location', 'southeast', 'fontsize', 30 )
else
    legend( 'Dynamic Movement Primitives', 'Elementary Dynamic Actions', 'location', 'southeast', 'fontsize',30 )
end
mySaveFig( gcf, 'sequence_figure2' )



%% ==================================================================
%% (--) Task-space Trajectory Tracking --- Rhythmic
% All data generated by "main_task_trajectory_rhythmic.py"

clear data*; clc;

% ============================ Movement Primitives ==================================== %
file_name1 = '../results/rhythmic_task_space/movement/ctrl_task_dmp.mat';
file_name2 = '../results/rhythmic_task_space/movement/dmp_rhythmicx.mat';
file_name3 = '../results/rhythmic_task_space/movement/dmp_rhythmicy.mat';

data_move{ 1 }  = load( file_name1 );
data_move{ 2 }  = load( file_name2 );
data_move{ 3 }  = load( file_name3 );


% =============================== Motor Primitives ==================================== %
file_name1 = '../results/rhythmic_task_space/motor/ctrl_task_imp.mat';
data_motor{ 1 } = load( file_name1 );
clear file*

% Dynamic Movement Primitives
subplot( 1, 2, 1 )
hold on

% The center of the circle
centers = data_motor{1}.centers;
r = data_motor{1}.amps;

plot( data_move{ 1 }.p_command( 1, : ) -centers( 1 ), data_move{ 1 }.p_command( 2, : ) -centers( 2 ), 'linewidth', 6, 'color', c.blue )
plot( r * cos( 0:0.001:2*pi ),  r * sin( 0:0.001:2*pi ), 'linewidth', 3, 'linestyle', '--', 'color', 'k')
 
xlabel( '$X$ (m)', 'fontsize', 30 )
ylabel( '$Y$ (m)', 'fontsize', 30 )
axis equal
set( gca, 'xlim', [-0.6, 0.60001], 'ylim', [-0.6, 0.60001], 'fontsize', 30 )
title( 'Dynamic Movement Primitives', 'fontsize', 30 )

% Elementary Dynamic Actions
subplot( 1, 2, 2)
hold on

plot( data_motor{ 1 }.p_arr( 1, : )-centers(1), data_motor{ 1 }.p_arr( 2, : )- centers(2), 'linewidth', 6, 'color', c.orange )
plot( r * cos( 0:0.001:2*pi ),  r * sin( 0:0.001:2*pi ), 'linewidth', 3, 'linestyle', '--', 'color', 'k')
 
xlabel( '$X$ (m)', 'fontsize', 30 )
ylabel( '$Y$ (m)', 'fontsize', 30 )
axis equal
set( gca, 'xlim', [-0.6, 0.60001], 'ylim', [-0.6, 0.60001], 'fontsize', 30 )
title( 'Elementary Dynamic Actions', 'fontsize', 30 )


mySaveFig( gcf,  'task_space_rhythmic' )

%% ==================================================================
%% (--) Discrete and Rhythmic Movements 
% All data generated by "main_discrete_and_rhythmic.py"

% ============================ Movement Primitives ==================================== %
file_name1 = '../results/discrete_and_rhythmic/movement/ctrl_joint_dmp.mat';
file_name2 = '../results/discrete_and_rhythmic/movement/dmp_goal_details.mat';
data_move{ 1 }  = load( file_name1 );
data_move{ 2 }  = load( file_name2 );

% =============================== Motor Primitives ==================================== %
file_name1 = '../results/discrete_and_rhythmic/motor/ctrl_joint_imp.mat';
data_motor{ 1 } = load( file_name1 );

% Dynamic Movement Primitives
subplot( 2, 1, 1 )
hold on
plot( data_move{ 1 }.t_arr, data_move{ 2 }.g, 'linewidth', 2, 'linestyle', '-', 'color', c.black )
plot( data_move{ 1 }.t_arr, data_move{ 2 }.g0, 'linewidth', 2, 'linestyle', '-.', 'color', c.black )
plot( data_move{ 1 }.t_arr, data_move{ 1 }.q_arr( 2, : ), 'linewidth', 6, 'color', c.blue )
title( 'Dynamic Movement Primitives', 'fontsize', 30 )
ylabel( '$q_{elbow}(t)$ (rad)', 'fontsize', 30 )
legend( '$g(t)$', '$g_0$' )
set( gca, 'xlim', [0, 17.4], 'fontsize', 30  )

% Elementary Dynamic Actions
subplot( 2, 1, 2 )
hold on
plot( data_motor{ 1 }.t_arr, data_motor{ 1 }.q0_arr( 2, :), 'linewidth', 2, 'linestyle', '-.', 'color', c.black )
plot( data_motor{ 1 }.t_arr, data_motor{ 1 }.q_arr( 2, : ), 'linewidth', 4, 'color', c.orange )
set( gca, 'xlim', [0, 17.4 ], 'fontsize', 30  )
xlabel( '$t$ (sec)', 'fontsize', 30 )
ylabel( '$q_{elbow}(t)$ (rad)', 'fontsize', 30 )
legend( '$q_{0,elbow}(t)$' )
title( 'Elementary Dynamic Actions', 'fontsize', 30 )

mySaveFig( gcf,  'discrete_and_rhythmic' )


%% ==================================================================
%% (--) Obstacle Avoidance 
 clear data*; clc;

% ============================ Movement Primitives ==================================== %
% Dynamic Movement Primitives
file_name1 = '../results/obstacle_avoidance/movement/ctrl_task_dmp.mat';
file_name2 = '../results/obstacle_avoidance/movement/dmpx.mat';
file_name3 = '../results/obstacle_avoidance/movement/dmpy.mat';

data_move{ 1 } = load( file_name1 );
data_move{ 2 } = load( file_name2 );
data_move{ 3 } = load( file_name3 );

% =============================== Motor Primitives ==================================== %
% Elementary Dynamic Actions
file_name1 = '../results/obstacle_avoidance/motor/ctrl_task_imp.mat';
file_name2 = '../results/obstacle_avoidance/motor/ctrl_task_imp2.mat';
data_motor{ 1 } = load( file_name1 );
data_motor{ 2 } = load( file_name2 );

subplot( 2, 2, [1,3] )
hold on
if mode == "MOVEMENT" || mode == "BOTH"
    plot( data_move{1}.p_arr( 1, : ), data_move{1}.p_arr( 2, : ), 'linewidth', 4, 'color', c.blue )
end
if mode == "MOTOR" || mode == "BOTH"    
    plot( data_motor{1}.p_arr( 1, : ), data_motor{1}.p_arr( 2, : ), 'linewidth', 4, 'color', c.orange )
end

plot( data_motor{1}.p0_arr( 1, :), data_motor{1}.p0_arr( 2, :),   'linewidth', 4, 'linestyle', '-.', 'color', c.black )
scatter( data_motor{1}.p0i( 1 ), data_motor{1}.p0i( 2 ), 200, 'o', 'markerfacecolor', c.black, 'markeredgecolor', c.black )
scatter( data_motor{1}.p0f( 1 ), data_motor{1}.p0f( 2 ), 200, 'o', 'markerfacecolor', c.black, 'markeredgecolor', c.black )

scatter( 0.5 *( data_motor{1}.p0i( 1 ) + data_motor{1}.p0f( 1 ) ), 0.5 *( data_motor{1}.p0i( 2 ) + data_motor{1}.p0f( 2 ) ) ...
        , 1000, 'o', 'markerfacecolor', c.grey, 'markeredgecolor', c.black, 'linewidth', 3 )
set( gca, 'xlim', [-.4, .40001], 'ylim', [ 0.3, 1.8],  'fontsize', 30 )
text( -0.25 + 0.5 *( data_motor{1}.p0i( 1 ) + data_motor{1}.p0f( 1 ) ), 0.5 *( data_motor{1}.p0i( 2 ) + data_motor{1}.p0f( 2 ) ), 'Obstacle' )
text( data_motor{1}.p0i( 1 )-0.08, data_motor{1}.p0i( 2 ), '$\mathbf{p}_i$' )
text( data_motor{1}.p0f( 1 )-0.08, data_motor{1}.p0f( 2 ), '$\mathbf{g}$' )

% daspect([1 1 1])
if mode == "MOVEMENT"
    legend( 'Dynamic Movement Primitives', 'fontsize', 30 , 'location', 'southwest' )
elseif mode == "MOTOR"
    legend( 'Elementary Dynamic Actions', 'fontsize', 30 , 'location', 'southwest' )
else
    legend( 'Dynamic Movement Primitives', 'Elementary Dynamic Actions', 'fontsize', 30 , 'location', 'southwest' )
end    
xlabel( '$X$ (m)', 'fontsize', 35 )
ylabel( '$Y$ (m)', 'fontsize', 35 )


if mode == "MOVEMENT" || mode == "BOTH" 
    subplot( 2, 2, 2)
    hold on
    plot( data_motor{1}.p0_arr( 1, :), data_motor{1}.p0_arr( 2, :),   'linewidth', 4, 'linestyle', '-.', 'color', c.black )
    scatter( 0.5 *( data_motor{1}.p0i( 1 ) + data_motor{1}.p0f( 1 ) ), 0.5 *( data_motor{1}.p0i( 2 ) + data_motor{1}.p0f( 2 ) ) ...
        , 1000, 'o', 'markerfacecolor', c.grey, 'markeredgecolor', c.black, 'linewidth', 3 )
    set( gca, 'xlim', [-.4, .40001], 'ylim', [ 0.3, 1.8],  'fontsize', 30 )
    % Get the x, y position of the joints 
    q_abs = cumsum( data_move{ 1 }.q_arr , 1 );
    x_arr = cumsum( cos( q_abs ), 1 );
    y_arr = cumsum( sin( q_abs ), 1 );

    alpha_arr = [0.2, 0.4, 0.8, 1.0];
    idx_arr   = [100, 1400, 2000, 3000];
    for i = 1 : length( alpha_arr )
        idx = idx_arr( i );
        alpha = alpha_arr( i );
        scatter( [ 0; x_arr( 1:end-1 ,idx ) ] , [ 0; y_arr( 1:end-1, idx) ], 200, 'markerfacecolor', c.black, 'markeredgecolor', c.black, 'MarkerFaceAlpha', alpha,'MarkerEdgeAlpha',alpha  )
        p2 = plot( [ 0; x_arr( :, idx ) ] , [ 0; y_arr( :, idx) ], 'color', c.black, 'linewidth', 4 );
        p2.Color( 4 ) = alpha;
        scatter( x_arr( end, idx ), y_arr( end, idx ),  600,  'markerfacecolor', c.blue, 'markeredgecolor', c.blue, 'MarkerFaceAlpha', alpha,'MarkerEdgeAlpha',alpha  )

    end

    plot( data_move{1}.p_arr( 1, : ), data_move{1}.p_arr( 2, : ), 'linewidth', 4, 'color', c.blue )

    title( 'Dynamic Movement Primitives', 'fontsize', 30 )
    set( gca, 'xlim', [-0.2, 0.2] , 'ylim', [0.0, 2.0], 'xticklabel', {}, 'yticklabel', {} )
    axis equal    
    xlabel( '$X$ (m)', 'fontsize', 35 )
    ylabel( '$Y$ (m)', 'fontsize', 35 )    

end
    
if mode == "MOTOR" || mode == "BOTH" 
    subplot( 2, 2, 4)
    hold on
    plot( data_motor{1}.p0_arr( 1, : ), data_motor{1}.p0_arr( 2, : ),  'linewidth', 2, 'linestyle', '-.', 'color', c.black )
    scatter( 0.5 *( data_motor{1}.p0i( 1 ) + data_motor{1}.p0f( 1 ) ), 0.5 *( data_motor{1}.p0i( 2 ) + data_motor{1}.p0f( 2 ) ) ...
        , 1000, 'o', 'markerfacecolor', c.grey, 'markeredgecolor', c.black, 'linewidth', 3 )
    set( gca, 'xlim', [-.4, .40001], 'ylim', [ 0.3, 1.8],  'fontsize', 30 )

    % Get the x, y position of the joints 
    q_abs = cumsum( data_motor{ 1 }.q_arr , 1 );
    x_arr = cumsum( cos( q_abs ), 1 );
    y_arr = cumsum( sin( q_abs ), 1 );

    alpha_arr = [0.2, 0.4, 0.8, 1.0];
    idx_arr   = [100, 1700, 2300, 5000];
    for i = 1 : length( alpha_arr )
        idx = idx_arr( i );
        alpha = alpha_arr( i );
        scatter( [ 0; x_arr( 1:end-1 ,idx ) ] , [ 0; y_arr( 1:end-1, idx) ], 200, 'markerfacecolor', c.black, 'markeredgecolor', c.black, 'MarkerFaceAlpha', alpha,'MarkerEdgeAlpha',alpha  )
        p2 = plot( [ 0; x_arr( :, idx ) ] , [ 0; y_arr( :, idx) ], 'color', c.black, 'linewidth', 4 );
        p2.Color( 4 ) = alpha;
        scatter( x_arr( end, idx ), y_arr( end, idx ),  600,  'markerfacecolor', c.orange ,'markeredgecolor', c.orange, 'MarkerFaceAlpha', alpha,'MarkerEdgeAlpha',alpha  )

    end
    plot( data_motor{1}.p_arr( 1, : ), data_motor{1}.p_arr( 2, : ), 'linewidth', 4, 'color', c.orange )


    title( 'Elementary Dynamic Actions', 'fontsize', 30 )
    set( gca, 'xlim', [-0.2, 0.2] , 'ylim', [0.0, 2.0], 'xticklabel', {}, 'yticklabel', {} )
    axis equal
    xlabel( '$X$ (m)', 'fontsize', 35 )
    ylabel( '$Y$ (m)', 'fontsize', 35 )        
end    

mySaveFig( gcf, 'obstacle' )

%% ==================================================================
%% (--) Unexpected Contact #1
% All data generated from "main_unexpected_collision.py"
clear data*; clc; close all;

% ======================================================================== %
% Dynamic Movement Primitives
% Without Obstacle
file_name_mov_wo_obs1 = '../results/unexpected_contact/movement/without_obstacle/dmpx.mat';
file_name_mov_wo_obs2 = '../results/unexpected_contact/movement/without_obstacle/dmpy.mat';
file_name_mov_wo_obs3 = '../results/unexpected_contact/movement/without_obstacle/ctrl_task_dmp.mat';

data_move_wo_obs{ 1 } = load( file_name_mov_wo_obs1 );
data_move_wo_obs{ 2 } = load( file_name_mov_wo_obs2 );
data_move_wo_obs{ 3 } = load( file_name_mov_wo_obs3 );

% With_obstacle_no_PD
file_name_mov_w_obs_woPD_1 = '../results/unexpected_contact/movement/with_obstacle_no_PD/dmpx.mat';
file_name_mov_w_obs_woPD_2 = '../results/unexpected_contact/movement/with_obstacle_no_PD/dmpy.mat';
file_name_mov_w_obs_woPD_3 = '../results/unexpected_contact/movement/with_obstacle_no_PD/ctrl_task_dmp.mat';

data_move_w_obs_woPD{ 1 } = load( file_name_mov_w_obs_woPD_1 );
data_move_w_obs_woPD{ 2 } = load( file_name_mov_w_obs_woPD_2 );
data_move_w_obs_woPD{ 3 } = load( file_name_mov_w_obs_woPD_3 );

% With obstacle PD
file_name_mov_w_obs_wPD_1 = '../results/unexpected_contact/movement/with_obstacle_joint_PD/dmpx.mat';
file_name_mov_w_obs_wPD_2 = '../results/unexpected_contact/movement/with_obstacle_joint_PD/dmpy.mat';
file_name_mov_w_obs_wPD_3 = '../results/unexpected_contact/movement/with_obstacle_joint_PD/ctrl_task_dmp.mat';
% file_name_mov_w_obs_wPD_4 = '../results/unexpected_contact/movement/with_obstacle_joint_PD/ctrl_task_imp.mat';

data_move_w_obs_wPD{ 1 } = load( file_name_mov_w_obs_wPD_1 );
data_move_w_obs_wPD{ 2 } = load( file_name_mov_w_obs_wPD_2 );
data_move_w_obs_wPD{ 3 } = load( file_name_mov_w_obs_wPD_3 );
% data_move_w_obs_wPD{ 4 } = load( file_name_mov_w_obs_wPD_4 );

% ======================================================================== %
% Elementary Dynamic Actions
% Without Obstacle
file_name_motor_wo_obs = '../results/unexpected_contact/motor/without_obstacle/ctrl_task_imp.mat';
data_motor_wo_obs{ 1 } = load( file_name_motor_wo_obs );

% With Obstacle no modulation
file_name_motor_w_obs_wo_mod = '../results/unexpected_contact/motor/with_obstacle_no_mod/ctrl_task_imp.mat';
data_motor_w_obs_wo_mod{ 1 } = load( file_name_motor_w_obs_wo_mod );

% With Obstacle modulation
file_name_motor_w_obs_w_mod = '../results/unexpected_contact/motor/with_obstacle_mod_Lmax_0p5/ctrl_task_imp_modulated.mat';
data_motor_w_obs_w_mod{ 1 } = load( file_name_motor_w_obs_w_mod );

clear file_name*

start = data_motor_wo_obs{1}.p0i;
goal = data_motor_wo_obs{1}.p0f;

if mode == "MOVEMENT" || mode == "BOTH" 
    
    % Get the x, y position of the joints 
    % =====================================================
    % ==== SUBPLOT #1
    % ==== Movement Primitives, Without obstacle 
    subplot( 2, 4, 1 )
    q_arr = data_move_wo_obs{3}.q_actual_arr;

    
    hold on
    plot( [ start( 1 ), goal( 1 )], [ start(2), goal( 2 ) ], 'linestyle', '--', 'linewidth', 3, 'color', c.black ) 
    
    q_abs = cumsum( q_arr , 1 );
    x_arr = cumsum( cos( q_abs ), 1 );
    y_arr = cumsum( sin( q_abs ), 1 );    
    
    alpha_arr = [0.2, 0.5, 1.0];
    idx_arr   = [100, 1700, 3500];
    for i = 1 : length( alpha_arr )
        idx = idx_arr( i );
        alpha = alpha_arr( i );
        scatter( [ 0; x_arr( 1:end-1, idx ) ] , [ 0; y_arr( 1:end-1, idx ) ], 200, 'markerfacecolor', c.black, 'markeredgecolor', c.black, 'MarkerFaceAlpha', alpha,'MarkerEdgeAlpha',alpha  )
        p2 = plot( [ 0; x_arr( :, idx ) ] , [ 0; y_arr( :, idx) ], 'color', c.black, 'linewidth', 4 );
        p2.Color( 4 ) = alpha;
        scatter( x_arr( end, idx ), y_arr( end, idx ),  600,  'markerfacecolor', c.blue, 'markeredgecolor', c.blue, 'MarkerFaceAlpha', alpha,'MarkerEdgeAlpha',alpha  )

    end    
    
    axis equal    
    set( gca, 'xlim', [-1.1, 1.1] , 'ylim', [-0.2, 2.0], 'xticklabel', {} )
    text( -1.5,1.8,'A')
    
    
    ylabel( 'Y (m)', 'fontsize', 30 )
    scatter( start( 1 ), start( 2 ), 100, 'square', 'markerfacecolor', c.black, 'markeredgecolor', c.black, 'markerfacealpha', 1.0 )    
    scatter( goal( 1 ), goal( 2 ), 100, 'square', 'markerfacecolor', c.white, 'markeredgecolor', c.white, 'markerfacealpha', 0.3 )
    text( goal( 1 )-0.3, goal( 2 ) +0.02, '$\mathbf{g}$', 'fontsize', 20    )
    
        
    % =====================================================
    % ==== SUBPLOT #2 
    % With Obstacle with PD, at hit
    subplot( 2, 4, 2 )

    
    hold on
    plot( [ start( 1 ), goal( 1 )], [ start(2), goal( 2 ) ], 'linestyle', '--', 'linewidth', 3, 'color', c.black ) 
    
    q_arr = data_move_w_obs_woPD{3}.q_actual_arr;
    
    q_abs = cumsum( q_arr , 1 );
    x_arr = cumsum( cos( q_abs ), 1 );
    y_arr = cumsum( sin( q_abs ), 1 );      
    
    alpha_arr = [0.2, 0.6];
    idx_arr   = [100, 1800];
    for i = 1 : length( alpha_arr )
        idx = idx_arr( i );
        alpha = alpha_arr( i );
        scatter( [ 0; x_arr( 1:end-1, idx ) ] , [ 0; y_arr( 1:end-1, idx ) ], 200, 'markerfacecolor', c.black, 'markeredgecolor', c.black, 'MarkerFaceAlpha', alpha,'MarkerEdgeAlpha',alpha  )
        p2 = plot( [ 0; x_arr( :, idx ) ] , [ 0; y_arr( :, idx) ], 'color', c.black, 'linewidth', 4 );
        p2.Color( 4 ) = alpha;
        scatter( x_arr( end, idx ), y_arr( end, idx ),  600,  'markerfacecolor', c.blue, 'markeredgecolor', c.blue, 'MarkerFaceAlpha', alpha,'MarkerEdgeAlpha',alpha  )

    end    
    
    scatter( 0.0, 1.2, 1500, "square", 'markerfacecolor', [0.4, 0.4, 0.4], 'markeredgecolor', [0.4,0.4,0.4], 'MarkerFaceAlpha', 1.0 ,'MarkerEdgeAlpha', 1.0 )    
    
    
    axis equal        
    set( gca, 'xlim', [-1.1, 1.1] , 'ylim', [-0.2, 2.0], 'xticklabel', {}, 'yticklabel', {} )
    text( -1.5,1.8,'B')
    
    scatter( start( 1 ), start( 2 ), 100, 'square', 'markerfacecolor', c.black, 'markeredgecolor', c.black, 'markerfacealpha', 1.0 )
    scatter( goal( 1 ), goal( 2 ), 100, 'square', 'markerfacecolor', c.black, 'markeredgecolor', c.black, 'markerfacealpha', 1.0 )
    text( goal( 1 )-0.3, goal( 2 ) +0.02, '$\mathbf{g}$', 'fontsize', 20    )
            
    
    
    % =====================================================
    % ==== SUBPLOT #3    
    subplot( 2, 4, 3 )
    
    q_arr = data_move_w_obs_woPD{3}.q_actual_arr;
    
    hold on
    plot( [ start( 1 ), goal( 1 )], [ start(2), goal( 2 ) ], 'linestyle', '--', 'linewidth', 3, 'color', c.black ) 
    
    q_abs = cumsum( q_arr , 1 );
    x_arr = cumsum( cos( q_abs ), 1 );
    y_arr = cumsum( sin( q_abs ), 1 );    
    
    alpha_arr = [0.6, 0.8, 1.0];
    idx_arr   = [1800, 2500, 3200];
    for i = 1 : length( alpha_arr )
        idx = idx_arr( i );
        alpha = alpha_arr( i );
        scatter( [ 0; x_arr( 1:end-1, idx ) ] , [ 0; y_arr( 1:end-1, idx ) ], 200, 'markerfacecolor', c.black, 'markeredgecolor', c.black, 'MarkerFaceAlpha', alpha,'MarkerEdgeAlpha',alpha  )
        p2 = plot( [ 0; x_arr( :, idx ) ] , [ 0; y_arr( :, idx) ], 'color', c.black, 'linewidth', 4 );
        p2.Color( 4 ) = alpha;
        scatter( x_arr( end, idx ), y_arr( end, idx ),  600,  'markerfacecolor', c.blue, 'markeredgecolor', c.blue, 'MarkerFaceAlpha', alpha,'MarkerEdgeAlpha',alpha  )

    end    
    
    scatter(  0.0, 1.2, 1500, "square", 'markerfacecolor', [0.4, 0.4, 0.4], 'markeredgecolor', [0.4,0.4,0.4], 'MarkerFaceAlpha', 0.2 ,'MarkerEdgeAlpha', 0.2 )    
    scatter( -0.6, 1.2, 1500, "square", 'markerfacecolor', [0.4, 0.4, 0.4], 'markeredgecolor', [0.4,0.4,0.4], 'MarkerFaceAlpha', 1.0 ,'MarkerEdgeAlpha', 1.0 )    

    axis equal        
    set( gca, 'xlim', [-1.1, 1.1] , 'ylim', [-0.2, 2.0], 'xticklabel', {} ,'yticklabel', {} )
    text( -1.5,1.8,'C')
    
    scatter( start( 1 ), start( 2 ), 100, 'square', 'markerfacecolor', c.black, 'markeredgecolor', c.black, 'markerfacealpha', 1.0 )    
    scatter( goal( 1 ), goal( 2 ), 100, 'square', 'markerfacecolor', c.black, 'markeredgecolor', c.black, 'markerfacealpha', 1.0 )
    text( goal( 1 )-0.3, goal( 2 ) +0.02, '$\mathbf{g}$', 'fontsize', 20    )

    % =====================================================
    % ==== SUBPLOT #4       
    % With Obstacle with PD, at hit    
    subplot( 2, 4, 4 )

    q_arr = data_move_w_obs_wPD{3}.q_actual_arr;

    
    q_abs = cumsum( q_arr , 1 );
    x_arr = cumsum( cos( q_abs ), 1 );
    y_arr = cumsum( sin( q_abs ), 1 );    
        
    
    hold on
    plot( [ start( 1 ), goal( 1 )], [ start(2), goal( 2 ) ], 'linestyle', '--', 'linewidth', 3, 'color', c.black )     
    alpha_arr = [0.6, 1.0];
    idx_arr   = [1800, 6000];
    for i = 1 : length( alpha_arr )
        idx = idx_arr( i );
        alpha = alpha_arr( i );
        scatter( [ 0; x_arr( 1:end-1, idx ) ] , [ 0; y_arr( 1:end-1, idx ) ], 200, 'markerfacecolor', c.black, 'markeredgecolor', c.black, 'MarkerFaceAlpha', alpha,'MarkerEdgeAlpha',alpha  )
        p2 = plot( [ 0; x_arr( :, idx ) ] , [ 0; y_arr( :, idx) ], 'color', c.black, 'linewidth', 4 );
        p2.Color( 4 ) = alpha;
        scatter( x_arr( end, idx ), y_arr( end, idx ),  600,  'markerfacecolor', c.blue, 'markeredgecolor', c.blue, 'MarkerFaceAlpha', alpha,'MarkerEdgeAlpha',alpha  )
    end            
    
    scatter(  0.0, 1.2, 1500, "square", 'markerfacecolor', [0.4, 0.4, 0.4], 'markeredgecolor', [0.4,0.4,0.4], 'MarkerFaceAlpha', 0.2 ,'MarkerEdgeAlpha', 0.2 )    
    scatter( -0.6, 1.2, 1500, "square", 'markerfacecolor', [0.4, 0.4, 0.4], 'markeredgecolor', [0.4,0.4,0.4], 'MarkerFaceAlpha', 1.0 ,'MarkerEdgeAlpha', 1.0 )    

    annotation('textarrow', [0.82, 0.795], [0.795, 0.795], 'Linewidth',2, 'color', [0.3, 0.3, 0.3]) 
    annotation('textarrow', [0.82, 0.795]-0.205, [0.795, 0.795], 'Linewidth',2, 'color', [0.3, 0.3, 0.3]) 
%     annotation('textarrow', [0.705, 0.74], [0.77, 0.77], 'Linewidth',4, 'headstyle', 'vback1', 'headwidth', 15, 'color', [0.3, 0.3, 0.3]) 
    

    axis equal        
    set( gca, 'xlim', [-1.1, 1.1] , 'ylim', [-0.2, 2.0], 'xticklabel', {}, 'yticklabel', {} )
    text( -1.5,1.8,'D')
    
    scatter( start( 1 ), start( 2 ), 100, 'square', 'markerfacecolor', c.black, 'markeredgecolor', c.black, 'markerfacealpha', 1.0 )    
    scatter( goal( 1 ), goal( 2 ), 100, 'square', 'markerfacecolor', c.white, 'markeredgecolor', c.white, 'markerfacealpha', 0.3 )
    text( goal( 1 )-0.3, goal( 2 ) +0.02, '$\mathbf{g}$', 'fontsize', 20    )    
        

    subplot( 2, 4, [5:8] )
    hold on
    
    plot( data_move_wo_obs{3}.t_arr, data_move_wo_obs{3}.p_arr( 2, : ), 'color', c.blue, 'linewidth', 5 )
    plot( data_move_wo_obs{3}.t_arr, data_move_w_obs_woPD{3}.p_arr( 2, :), 'color', c.blue, 'linestyle', '--', 'linewidth', 5 )   
    plot( data_move_w_obs_wPD{3}.t_arr, data_move_w_obs_wPD{3}.p_arr( 2, :), 'color', c.blue, 'linestyle', ':', 'linewidth', 5 )   
    set( gca, 'xlim', [0, 4], 'ylim', [-0.5000,2.0000], 'ytick', [ 0, start( 2 ), 1.0, goal( 2 ) ], 'yticklabel', { 0, '', 1,''}, ...
                 'xtick', [ 0, 1.28, 2.35, 3, 4 ], 'xticklabel', { 0, 'Contact', 'Obstacle Removed', 3, 4 }, 'fontsize', 25 )
    xline( 1.28, 'linewidth', 1, 'linestyle', '--');             
    xline( 2.35, 'linewidth', 1, 'linestyle', '--');                 
	yline( start(2), 'linewidth', 1, 'linestyle', '--');
    yline(  goal(2), 'linewidth', 1, 'linestyle', '--' );
    scatter( 1.28, 0.94, 300, 'o', 'markerfacecolor', 0.7*c.white, 'markeredgecolor', [0.4,0.4,0.4], 'MarkerFaceAlpha', 1.0 ,'MarkerEdgeAlpha', 1.0, 'linewidth', 3 )    
    
    text( 0.03, 0.65, 'Start', 'fontsize', 20 )
    text( 0.03, 1.82, 'Goal $\mathbf{g}$','fontsize', 20 )
    
    xlabel( '$t$ (sec)', 'fontsize', 30 )
    ylabel( 'Y (m)', 'fontsize', 30 )
    get( gca, 'ylim' )

    text( -0.15,1.8,'E')
    legend( 'A', 'B,C', 'B,D', 'location', 'southwest' )
    sgtitle( 'Dynamic Movement Primitives', 'fontsize', 30)

    mySaveFig( gcf, 'unexpected_contact_movement' )
    
end   
    
if mode == "MOTOR" || mode == "BOTH" 
    figure( )
    subplot( 2, 4, 1 )
    
    hold on
    plot( [ start( 1 ), goal( 1 )], [ start(2), goal( 2 ) ], 'linestyle', '--', 'linewidth', 3, 'color', c.black ) 
    
    q_arr = data_motor_wo_obs{1}.q_arr;
    
    q_abs = cumsum( q_arr , 1 );
    x_arr = cumsum( cos( q_abs ), 1 );
    y_arr = cumsum( sin( q_abs ), 1 );    
    
    alpha_arr = [0.2, 0.5, 1.0];
    idx_arr   = [100, 1700, 3500];
    for i = 1 : length( alpha_arr )
        idx = idx_arr( i );
        alpha = alpha_arr( i );
        scatter( [ 0; x_arr( 1:end-1, idx ) ] , [ 0; y_arr( 1:end-1, idx ) ], 200, 'markerfacecolor', c.black, 'markeredgecolor', c.black, 'MarkerFaceAlpha', alpha,'MarkerEdgeAlpha',alpha  )
        p2 = plot( [ 0; x_arr( :, idx ) ] , [ 0; y_arr( :, idx) ], 'color', c.black, 'linewidth', 4 );
        p2.Color( 4 ) = alpha;
        scatter( x_arr( end, idx ), y_arr( end, idx ),  600,  'markerfacecolor', c.orange, 'markeredgecolor', c.orange, 'MarkerFaceAlpha', alpha,'MarkerEdgeAlpha',alpha  )

    end    
    
    axis equal    
    set( gca, 'xlim', [-1.1, 1.1] , 'ylim', [-0.2, 2.0], 'xticklabel', {} )
    text( -1.5,1.8,'A')
    ylabel( 'Y (m)', 'fontsize', 30 )
    
    scatter( start( 1 ), start( 2 ), 100, 'square', 'markerfacecolor', c.black, 'markeredgecolor', c.black, 'markerfacealpha', 1.0 )    
    scatter( goal( 1 ), goal( 2 ), 100, 'square', 'markerfacecolor', c.white, 'markeredgecolor', c.white, 'markerfacealpha', 0.3 )
    text( goal( 1 )-0.3, goal( 2 ) +0.02, '$\mathbf{g}$', 'fontsize', 20    )    
    
    subplot( 2, 4, 2 )
    
    hold on
    plot( [ start( 1 ), goal( 1 )], [ start(2), goal( 2 ) ], 'linestyle', '--', 'linewidth', 3, 'color', c.black ) 
    
    q_arr = data_motor_w_obs_wo_mod{1}.q_arr;
    
    q_abs = cumsum( q_arr , 1 );
    x_arr = cumsum( cos( q_abs ), 1 );
    y_arr = cumsum( sin( q_abs ), 1 );    
    
    alpha_arr = [0.2, 0.6];
    idx_arr   = [100, 1800];
    for i = 1 : length( alpha_arr )
        idx = idx_arr( i );
        alpha = alpha_arr( i );
        scatter( [ 0; x_arr( 1:end-1, idx ) ] , [ 0; y_arr( 1:end-1, idx ) ], 200, 'markerfacecolor', c.black, 'markeredgecolor', c.black, 'MarkerFaceAlpha', alpha,'MarkerEdgeAlpha',alpha  )
        p2 = plot( [ 0; x_arr( :, idx ) ] , [ 0; y_arr( :, idx) ], 'color', c.black, 'linewidth', 4 );
        p2.Color( 4 ) = alpha;
        scatter( x_arr( end, idx ), y_arr( end, idx ),  600,  'markerfacecolor', c.orange, 'markeredgecolor', c.orange, 'MarkerFaceAlpha', alpha,'MarkerEdgeAlpha',alpha  )

    end    
    
    scatter( 0.0, 1.2, 1500, "square", 'markerfacecolor', [0.4, 0.4, 0.4], 'markeredgecolor', [0.4,0.4,0.4], 'MarkerFaceAlpha', 1.0 ,'MarkerEdgeAlpha', 1.0 )    
    scatter( start( 1 ), start( 2 ), 100, 'square', 'markerfacecolor', c.black, 'markeredgecolor', c.black, 'markerfacealpha', 1.0 )
    scatter( goal( 1 ), goal( 2 ), 100, 'square', 'markerfacecolor', c.black, 'markeredgecolor', c.black, 'markerfacealpha', 1.0 )        
    text( goal( 1 )-0.3, goal( 2 ) +0.02, '$\mathbf{g}$', 'fontsize', 20    )    
    
    axis equal    
    set( gca, 'xlim', [-1.1, 1.1] , 'ylim', [-0.2, 2.0], 'xticklabel', {}, 'yticklabel', {} )
    text( -1.5,1.8,'B')    
     
    
    subplot( 2, 4, 3 )
    
    hold on
    plot( [ start( 1 ), goal( 1 )], [ start(2), goal( 2 ) ], 'linestyle', '--', 'linewidth', 3, 'color', c.black ) 
    
    q_arr = data_motor_w_obs_wo_mod{1}.q_arr;
    
    q_abs = cumsum( q_arr , 1 );
    x_arr = cumsum( cos( q_abs ), 1 );
    y_arr = cumsum( sin( q_abs ), 1 );    
    
    alpha_arr = [0.6, 0.8, 1.0];
    idx_arr   = [1800, 2700, 5500];
    for i = 1 : length( alpha_arr )
        idx = idx_arr( i );
        alpha = alpha_arr( i );
        scatter( [ 0; x_arr( 1:end-1, idx ) ] , [ 0; y_arr( 1:end-1, idx ) ], 200, 'markerfacecolor', c.black, 'markeredgecolor', c.black, 'MarkerFaceAlpha', alpha,'MarkerEdgeAlpha',alpha  )
        p2 = plot( [ 0; x_arr( :, idx ) ] , [ 0; y_arr( :, idx) ], 'color', c.black, 'linewidth', 4 );
        p2.Color( 4 ) = alpha;
        scatter( x_arr( end, idx ), y_arr( end, idx ),  600,  'markerfacecolor', c.orange, 'markeredgecolor', c.orange, 'MarkerFaceAlpha', alpha,'MarkerEdgeAlpha',alpha  )

    end    
    
    scatter(  0.0, 1.2, 1500, "square", 'markerfacecolor', [0.4, 0.4, 0.4], 'markeredgecolor', [0.4,0.4,0.4], 'MarkerFaceAlpha', 0.2 ,'MarkerEdgeAlpha', 0.2 )    
    scatter( -0.6, 1.2, 1500, "square", 'markerfacecolor', [0.4, 0.4, 0.4], 'markeredgecolor', [0.4,0.4,0.4], 'MarkerFaceAlpha', 1.0 ,'MarkerEdgeAlpha', 1.0 )    
    scatter( start( 1 ), start( 2 ), 100, 'square', 'markerfacecolor', c.black, 'markeredgecolor', c.black, 'markerfacealpha', 1.0 )
    scatter( goal( 1 ), goal( 2 ), 100, 'square', 'markerfacecolor', c.white, 'markeredgecolor', c.white, 'markerfacealpha', 0.3 )
    
    text( goal( 1 )-0.3, goal( 2 ) +0.02, '$\mathbf{g}$', 'fontsize', 20    )    
    
    axis equal    
    set( gca, 'xlim', [-1.1, 1.1] , 'ylim', [-0.2, 2.0], 'xticklabel', {}, 'yticklabel', {} )
    text( -1.5,1.8,'C')    
         
    subplot( 2, 4, 4 )
    
    hold on
    plot( [ start( 1 ), goal( 1 )], [ start(2), goal( 2 ) ], 'linestyle', '--', 'linewidth', 3, 'color', c.black ) 
    
    q_arr = data_motor_w_obs_w_mod{1}.q_arr;
    
    q_abs = cumsum( q_arr , 1 );
    x_arr = cumsum( cos( q_abs ), 1 );
    y_arr = cumsum( sin( q_abs ), 1 );    
    
    alpha_arr = [0.6, 0.8, 1.0];
    idx_arr   = [1800, 3100, 5500];
    for i = 1 : length( alpha_arr )
        idx = idx_arr( i );
        alpha = alpha_arr( i );
        scatter( [ 0; x_arr( 1:end-1, idx ) ] , [ 0; y_arr( 1:end-1, idx ) ], 200, 'markerfacecolor', c.black, 'markeredgecolor', c.black, 'MarkerFaceAlpha', alpha,'MarkerEdgeAlpha',alpha  )
        p2 = plot( [ 0; x_arr( :, idx ) ] , [ 0; y_arr( :, idx) ], 'color', c.black, 'linewidth', 4 );
        p2.Color( 4 ) = alpha;
        scatter( x_arr( end, idx ), y_arr( end, idx ),  600,  'markerfacecolor', c.orange, 'markeredgecolor', c.orange, 'MarkerFaceAlpha', alpha,'MarkerEdgeAlpha',alpha  )

    end    
    
    scatter(  0.0, 1.2, 1500, "square", 'markerfacecolor', [0.4, 0.4, 0.4], 'markeredgecolor', [0.4,0.4,0.4], 'MarkerFaceAlpha', 0.2 ,'MarkerEdgeAlpha', 0.2 )    
    scatter( -0.6, 1.2, 1500, "square", 'markerfacecolor', [0.4, 0.4, 0.4], 'markeredgecolor', [0.4,0.4,0.4], 'MarkerFaceAlpha', 1.0 ,'MarkerEdgeAlpha', 1.0 )    

    scatter( start( 1 ), start( 2 ), 100, 'square', 'markerfacecolor', c.black, 'markeredgecolor', c.black, 'markerfacealpha', 1.0 )
    scatter( goal( 1 ), goal( 2 ), 100, 'square', 'markerfacecolor', c.white, 'markeredgecolor', c.white, 'markerfacealpha', 0.3 )
    
    text( goal( 1 )-0.3, goal( 2 ) +0.02, '$\mathbf{g}$', 'fontsize', 20    )    
        
    
    axis equal    
    set( gca, 'xlim', [-1.1, 1.1] , 'ylim', [-0.2, 2.0], 'xticklabel', {}, 'yticklabel', {} )
    text( -1.5,1.8,'D')    
             
    annotation('textarrow', [0.82, 0.795], [0.795, 0.795], 'Linewidth',2, 'color', [0.3, 0.3, 0.3]) 
    annotation('textarrow', [0.82, 0.795]-0.205, [0.795, 0.795], 'Linewidth',2, 'color', [0.3, 0.3, 0.3]) 

    
    subplot( 2, 4, 5:8 )
    hold on
    
    plot( data_motor_wo_obs{1}.t_arr, data_motor_wo_obs{1}.p_arr( 2, : ), 'color', c.orange, 'linewidth', 5 )
    plot( data_motor_w_obs_wo_mod{1}.t_arr, data_motor_w_obs_wo_mod{1}.p_arr( 2, :), 'color', c.orange, 'linestyle', '--', 'linewidth', 5 )   
    plot( data_motor_w_obs_w_mod{1}.t_arr, data_motor_w_obs_w_mod{1}.p_arr( 2, :), 'color', c.orange, 'linestyle', ':', 'linewidth', 5 )   
    set( gca, 'xlim', [0, 4], 'ylim', [-0.5000,2.0000], 'ytick', [ 0, start( 2 ), 1.0, goal( 2 ) ], 'yticklabel', { 0, '', 1,''}, ...
                 'xtick', [ 0, 1.28, 2.35, 3, 4 ], 'xticklabel', { 0, 'Contact', 'Obstacle Removed', 3, 4 }, 'fontsize', 25 )
    xline( 1.28, 'linewidth', 1, 'linestyle', '--');             
    xline( 2.35, 'linewidth', 1, 'linestyle', '--');                 
	yline( start(2), 'linewidth', 1, 'linestyle', '--');
    yline(  goal(2), 'linewidth', 1, 'linestyle', '--' );
    scatter( 1.28, 0.94, 300, 'o', 'markerfacecolor', 0.7*c.white, 'markeredgecolor', [0.4,0.4,0.4], 'MarkerFaceAlpha', 1.0 ,'MarkerEdgeAlpha', 1.0, 'linewidth', 3 )    
    
    xlabel( '$t$ (sec)', 'fontsize', 30 )
    ylabel( 'Y (m)', 'fontsize', 30 )    
    text( 0.03, 0.65, 'Start', 'fontsize', 20 )
    text( 0.03, 1.82, 'Goal $\mathbf{g}$','fontsize', 20 )
    text( -0.15,1.8,'E')
    legend( 'A', 'B,C', 'B,D', 'location', 'southwest' )
    sgtitle( 'Elementary Dynamic Actions', 'fontsize', 30)

    mySaveFig( gcf, 'unexpected_contact_motor' )

end

%% (--) Unexpected Contact #2
% All data generated from "main_unexpected_collision.py"
close all; clc;
% Plotting the lambda value multiplied on the 
t_arr = data_motor_w_obs_w_mod{1}.t_arr;
lambda = data_motor_w_obs_w_mod{1}.my_lambda_arr;

U = data_motor_w_obs_w_mod{1}.pot_arr;
K = data_motor_w_obs_w_mod{1}.kin_arr;

subplot( 2, 1, 1 )
hold on
plot( t_arr, lambda, 'color', c.orange, 'linestyle', '-', 'linewidth', 5 )   
set( gca, 'xlim', [0, 4], 'xtick', [ 0, 1.28, 2.35, 3, 4 ], 'xticklabel', { 0, 'Contact', 'Obstacle Removed', 3, 4 }, 'fontsize', 25, 'ytick', [0., 0.5, 1.0] )

ylabel( '$\lambda$ (-)', 'fontsize', 30 )
xline( 1.28, 'linewidth', 2, 'linestyle', '--');             
xline( 2.35, 'linewidth', 2, 'linestyle', '--');   
subplot( 2, 1, 2 )
hold on

plot( t_arr, U.*lambda + K, 'color', c.orange, 'linestyle', '-', 'linewidth', 5 )   
set( gca, 'xlim', [0, 4], 'ytick', [ 0., 0.5 ] , 'yticklabel',{ 0., 0.5} , 'xtick', [ 0, 1.28, 2.35, 3, 4 ], 'xticklabel', { 0, 'Contact', 'Obstacle Removed', 3, 4 }, 'fontsize', 25 )
xline( 1.28, 'linewidth', 2, 'linestyle', '--');             
xline( 2.35, 'linewidth', 2, 'linestyle', '--');   
yline( 0.5, 'linewidth', 2, 'linestyle', '--' );
text( 0.05, 0.45, '$\mathcal{L}_{max}$' )
xlabel( '$t$ (sec)', 'fontsize', 30 )
ylabel( '$\mathcal{L}_c$ (J)', 'fontsize', 30 )

mySaveFig( gcf, 'unexpected_contact_motor_lambda' )
