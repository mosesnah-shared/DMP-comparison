% [Project]        DMP Comparison - Video Generation
% [Author]         Moses C. Nah
% [Creation Date]  Monday, Oct. 23th, 2022
%
% [Emails]         Moses C. Nah   : mosesnah@mit.edu

%% (--) INITIALIZATION

clear; close all; clc; workspace;

% Add the Libraries of 
addpath( 'MATLAB_Library/myUtils', 'MATLAB_Library/myGraphics' )

cd( fileparts( matlab.desktop.editor.getActiveFilename ) );     
myFigureConfig( 'fontsize',  20, ...
               'LineWidth',  10, ...
           'AxesLineWidth', 1.5, ...     For Grid line, axes line width etc.
              'markerSize',  25    )  
             
global c                                                                   % Setting color structure 'c' as global variable
c  = myColor(); 

global mode 
mode = "MOVEMENT"; % Either movement or motor or both to generate the images 

%% ==================================================================
%% (--) Goal directed Discrete Movement - Joint Space
% All Data generated with "main_joint_trajectory_discrete.py" script
clear data*; clc;

% ============================ Movement Primitives ==================================== %
file_name_move1 = '../results/discrete_move_joint_space/movement/dmp_joint1.mat';
file_name_move2 = '../results/discrete_move_joint_space/movement/dmp_joint2.mat';
file_name_move3 = '../results/discrete_move_joint_space/movement/ctrl_joint_dmp.mat';

data_move{ 1 } = load( file_name_move1 );       % DMP For the first  joint
data_move{ 2 } = load( file_name_move2 );       % DMP For the second joint
data_move{ 3 } = load( file_name_move3 );       % The model for the inverse-dynamics model

fs = 40;
lw1 = 6; lw2= 9;

t_arr_move = data_move{ 1 }.t_arr;
q_des = data_move{ 3 }.q_command;

% =============================== Motor Primitives ==================================== %
file_name_motor1 = '../results/discrete_move_joint_space/motor/ctrl_joint_imp.mat';

data_motor = load( file_name_motor1 );


[ q0_arr, dq0_arr, ddq0_arr ] = min_jerk_traj( data_motor.t_arr, data_motor.q0i, ...
                                               data_motor.q0f, data_motor.D, data_motor.ti );

clear file*

% ======================================================================== %
% Plot1: Dynamic Movement Primitives, joint 1
subplot( 2, 2, 1 )
hold on

% The desired trajectory which is the minimum-jerk 
plot( t_arr_move, data_move{ 1 }.y_arr, 'linewidth', lw2,  'color', c.blue );
plot( t_arr_move, q0_arr( 1, : ), 'color', 'k', 'linewidth', lw1, 'linestyle', '--' );
set( gca, 'xlim', [ 0, 2.0 ], 'ylim', [0, 1.2], 'fontsize', fs  )
ylabel( 'Joint1, $q_1(t)$ (rad)', 'fontsize', fs  )
title( 'Dynamic Movement Primitives', 'fontsize', fs  )

% ======================================================================== %
% Plot2: Dynamic Movement Primitives, joint 2
subplot( 2, 2, 3 )
hold on


plot( t_arr_move, data_move{ 2 }.y_arr, 'linewidth', lw2,  'color', c.blue );
plot( t_arr_move, q0_arr( 2, : ), 'color', 'k', 'linewidth', lw1, 'linestyle', '--' );
set( gca, 'xlim', [ 0, 2.0 ], 'ylim', [0, 1.2], 'fontsize', fs  )
xlabel( '$t$ (sec)', 'fontsize', fs  )
ylabel( 'Joint2, $q_2(t)$ (rad)', 'fontsize', fs  )

% ======================================================================== %
% Plot3: Elementary Dynamic Actions, joint 1
subplot( 2, 2, 2 )
hold on
plot( data_motor.t_arr, data_motor.q_arr( 1, : ), 'linewidth', lw2,  'color', c.orange );
plot( data_motor.t_arr, q0_arr( 1, : ), 'color', 'k', 'linewidth', lw1, 'linestyle', '--' );
set( gca, 'xlim', [ 0, 2.0 ], 'ylim', [0, 1.2], 'fontsize', fs  )
title( 'Elementary Dynamic Actions', 'fontsize', fs  )


% ======================================================================== %
% Plot3: Elementary Dynamic Actions, joint 2
subplot( 2, 2, 4 )
hold on
plot( data_motor.t_arr, data_motor.q_arr( 2, : ), 'linewidth', lw2,  'color', c.orange );
plot( data_motor.t_arr, q0_arr( 2, : ), 'color', 'k', 'linewidth', lw1, 'linestyle', '--' );
set( gca, 'xlim', [ 0, 2.0 ], 'ylim', [0, 1.2], 'fontsize', 40 )
xlabel( '$t$ (sec)', 'fontsize', 40 )


mySaveFig( gcf, 'goal_directed_discrete_joint_space' )

%% ==================================================================
%% (--) Goal directed Discrete Movement - Task-Space
% All data generated by "main_task_trajectory_no_redund.py"
clear data*; clc;

fs = 40;
lw1 = 6; lw2= 9;


% The number of targets
N = 8;
% c_arr = [ c.blue; c.orange; c.green; c.purple; c.roseRed; c.peach; c.pink; c.blue_sky ];


% ============================ Movement Primitives ==================================== %
data_move = load( '../results/discrete_move_task_space_wo_redund/movement/vertical/ctrl_task_dmp.mat'  );

% =============================== Motor Primitives ==================================== %
data_motor = load( '../results/discrete_move_task_space_wo_redund/motor/vertical/ctrl_task_imp.mat' );

% ======================================================================== %
% Plot1: Dynamic Movement Primitives
subplot( 1, 2, 1 )
hold on

g_start = data_move.p_command(  :, 1 );
g_end = data_move.p_command(  :, end );

% Get the x, y position of the joints 
q_abs = cumsum( data_move.q_arr , 1 );
x_arr = cumsum( cos( q_abs ), 1 );
y_arr = cumsum( sin( q_abs ), 1 );


alpha_arr = [0.2, 0.3, 0.3, 1.0];
idx_arr   = [1, 400, 600, 1000];
for i = 1 : length( idx_arr )
    idx = idx_arr( i );
    alpha = alpha_arr( i );
    scatter( [ 0, x_arr( 1:end-1, idx  )' ] , [ 0, y_arr(1:end-1, idx )' ], 400, 'markerfacecolor', c.black, 'markeredgecolor', c.black, 'MarkerFaceAlpha', alpha,'MarkerEdgeAlpha',alpha  )
    p2 = plot( [ 0, x_arr( :, idx )' ] , [ 0, y_arr( :, idx)' ], 'color', c.black, 'linewidth', 4 );
    p2.Color( 4 ) = alpha;
    scatter( x_arr( end, idx ), y_arr( end, idx  ),  1200,  'markerfacecolor', c.blue, 'markeredgecolor', c.black, 'MarkerFaceAlpha', alpha,'MarkerEdgeAlpha',alpha  )

end

plot( data_move.p_arr( 1, 1:1000 ), data_move.p_arr( 2, 1:1000  ) , 'linewidth', 8, 'color', c.blue )
plot( data_move.p_command(  1, : ), data_move.p_command( 2, : ), 'linewidth', 4, 'color', c.black, 'linestyle',  '--' )

% Start and End Location
scatter( 0, g_start( 2 ), 300, 'o', 'markerfacecolor', c.pink_sunset, 'markeredgecolor', c.black, 'markerfacealpha', 1.0 )
scatter( 0,   g_end( 2 ), 300, 'square', 'markerfacecolor', c.white, 'markeredgecolor', c.black, 'markerfacealpha', 1.0 )

text( -0.75, g_start( 2 ), 'Start $\mathbf{p}_i$' , 'fontsize', fs)
text( -0.75, g_end( 2 ), 'Goal $\mathbf{g}$'   , 'fontsize', fs )


xlb= xlabel( '$X$ (m)', 'fontsize', fs );
xlb.Position( 1 ) = xlb.Position( 1 ) + 1.0;
xlb.Position( 2 ) = xlb.Position( 2 ) - 0.4;
ylabel( '$Y$ (m)', 'fontsize', fs )
axis equal

set( gca, 'xlim', [-1.1, 1.1] , 'ylim', [-0.2, 2.4], 'xtick', [-1.0, 0.0, 1.0], 'ytick', [0.0, 1.0, 2.0], 'fontsize', 1.2*fs ) 
% title( 'Dynamic Movement Primitives', 'fontsize', fs )


% ======================================================================== %
% Plot2: Elementary Dynamic Actions
subplot( 1, 2, 2)
hold on

alpha_arr = [0.2, 0.3, 0.3, 1.0];
idx_arr   = [1, 400, 600, 2000];
% Get the x, y position of the joints 
q_abs = cumsum( data_motor.q_arr , 1 );
x_arr = cumsum( cos( q_abs ), 1 );
y_arr = cumsum( sin( q_abs ), 1 );

for i = 1 : length( idx_arr )
    idx = idx_arr( i );
    alpha = alpha_arr( i );
    scatter( [ 0, x_arr( 1:end-1, idx  )' ] , [ 0, y_arr(1:end-1, idx )' ], 400, 'markerfacecolor', c.black, 'markeredgecolor', c.black, 'MarkerFaceAlpha', alpha,'MarkerEdgeAlpha',alpha  )
    p2 = plot( [ 0, x_arr( :, idx )' ] , [ 0, y_arr( :, idx)' ], 'color', c.black, 'linewidth', 4 );
    p2.Color( 4 ) = alpha;
    scatter( x_arr( end, idx ), y_arr( end, idx  ),  1200,  'markerfacecolor', c.orange, 'markeredgecolor', c.black, 'MarkerFaceAlpha', alpha,'MarkerEdgeAlpha',alpha  )

end
plot( data_motor.p_arr( 1, : ) , data_motor.p_arr( 2, : ), 'linewidth',  8, 'color', c.orange )
plot( data_motor.p0_arr( 1, : ), data_motor.p0_arr( 2, : ), 'linewidth', 4, 'color', c.black, 'linestyle',  '--' )

% Start and End Location
scatter( 0, g_start( 2 ), 300, 'o', 'markerfacecolor', c.pink_sunset, 'markeredgecolor', c.black, 'markerfacealpha', 1.0 )
scatter( 0,   g_end( 2 ), 300, 'square', 'markerfacecolor', c.white, 'markeredgecolor', c.black, 'markerfacealpha', 1.0 )

text( -0.75, g_start( 2 ), 'Start $\mathbf{p}_i$' , 'fontsize', fs)
text( -0.75, g_end( 2 ), 'Goal $\mathbf{g}$'   , 'fontsize', fs )

% xlabel( '$X$ (m)', 'fontsize', fs )
% ylabel( '$Y$ (m)', 'fontsize', fs )
axis equal
set( gca, 'xlim', [-1.1, 1.1] , 'ylim', [-0.2, 2.4], 'xtick', [-1.0, 0.0, 1.0], 'ytick', [0.0, 1.0, 2.0], 'fontsize', 1.2*fs ) 
% title( 'Elementary Dynamic Actions', 'fontsize', fs )

mySaveFig( gcf, 'goal_directed_discrete_task_space_no_stretch' )


%% ==================================================================
%% (--) Goal directed Discrete Movement - Task-Space, Fully Streched #1

clear data*; clc;
close all;

% ============================ Movement Primitives ==================================== %
data_move = load( '../results/discrete_move_task_space_wo_redund/movement/vertical_stretch/ctrl_task_dmp.mat'  );

% =============================== Motor Primitives ==================================== %
data_motor = load( '../results/discrete_move_task_space_wo_redund/motor/vertical_stretch/ctrl_task_imp.mat' );

g_start = data_move.p_command(  :, 1 );
g_end = data_move.p_command(  :, end );

% ======================================================================== %
% Plot1: Dynamic Movement Primitives
subplot( 1, 2, 1 )
hold on

% Get the x, y position of the joints 
q_abs = cumsum( data_move.q_arr , 1 );
x_arr = cumsum( cos( q_abs ), 1 );
y_arr = cumsum( sin( q_abs ), 1 );


alpha_arr = [0.2, 0.3, 0.3, 1.0];
idx_arr   = [1, 500, 700, 900];
for i = 1 : length( idx_arr )
    idx = idx_arr( i );
    alpha = alpha_arr( i );
    scatter( [ 0, x_arr( 1:end-1, idx  )' ] , [ 0, y_arr(1:end-1, idx )' ], 400, 'markerfacecolor', c.black, 'markeredgecolor', c.black, 'MarkerFaceAlpha', alpha,'MarkerEdgeAlpha',alpha  )
    p2 = plot( [ 0, x_arr( :, idx )' ] , [ 0, y_arr( :, idx)' ], 'color', c.black, 'linewidth', 4 );
    p2.Color( 4 ) = alpha;
    scatter( x_arr( end, idx ), y_arr( end, idx  ),  1200,  'markerfacecolor', c.blue, 'markeredgecolor', c.black, 'MarkerFaceAlpha', alpha,'MarkerEdgeAlpha',alpha  )

end

plot( data_move.p_arr( 1, : ), data_move.p_arr( 2, : ) , 'linewidth', 8, 'color', c.blue_sky )
plot( data_move.p_command(  1, : ), data_move.p_command( 2, : ), 'linewidth', 4, 'color', c.black, 'linestyle',  '--' )

% Start and End Location
scatter( 0, g_start( 2 ), 300, 'o', 'markerfacecolor', c.pink_sunset, 'markeredgecolor', c.black, 'markerfacealpha', 1.0 )
scatter( 0,   g_end( 2 ),  300, 'square', 'markerfacecolor', c.white, 'markeredgecolor', c.black, 'markerfacealpha', 1.0 )

text( -0.75, g_start( 2 ), 'Start $\mathbf{p}_i$' , 'fontsize', fs)
text( -0.75, g_end( 2 ), 'Goal $\mathbf{g}$'   , 'fontsize', fs )


xlb= xlabel( '$X$ (m)', 'fontsize', fs );
xlb.Position( 1 ) = xlb.Position( 1 ) + 1.0;
xlb.Position( 2 ) = xlb.Position( 2 ) - 0.4;
ylabel( '$Y$ (m)', 'fontsize', fs )
axis equal

set( gca, 'xlim', [-1.1, 1.1] , 'ylim', [-0.2, 2.4], 'xtick', [-1.0, 0.0, 1.0], 'ytick', [0.0, 1.0, 2.0], 'fontsize',1.2* fs )

% ======================================================================== %
% Plot2: Elementary Dynamic Actions
subplot( 1, 2, 2)
hold on

alpha_arr = [0.2, 0.3, 0.3, 0.3, 1.0 ];
idx_arr   = [1, 400, 600, 1500, 2430 ];

% Get the x, y position of the joints 
q_abs = cumsum( data_motor.q_arr , 1 );
x_arr = cumsum( cos( q_abs ), 1 );
y_arr = cumsum( sin( q_abs ), 1 );

for i = 1 : length( idx_arr )
    idx = idx_arr( i );
    alpha = alpha_arr( i );
    scatter( [ 0, x_arr( 1:end-1, idx  )' ] , [ 0, y_arr(1:end-1, idx )' ], 400, 'markerfacecolor', c.black, 'markeredgecolor', c.black, 'MarkerFaceAlpha', alpha,'MarkerEdgeAlpha',alpha  )
    p2 = plot( [ 0, x_arr( :, idx )' ] , [ 0, y_arr( :, idx)' ], 'color', c.black, 'linewidth', 4 );
    p2.Color( 4 ) = alpha;
    scatter( x_arr( end, idx ), y_arr( end, idx  ),  1200,  'markerfacecolor', c.orange, 'markeredgecolor', c.black, 'MarkerFaceAlpha', alpha,'MarkerEdgeAlpha',alpha  )

end

plot( data_motor.p_arr( 1, : ) , data_motor.p_arr( 2, : ), 'linewidth', 8, 'color', c.orange )
plot( data_motor.p0_arr( 1, : ), data_motor.p0_arr( 2, : ), 'linewidth', 4, 'color', c.black, 'linestyle',  '--' )

% Start and End Location
scatter( 0, g_start( 2 ), 300, 'o', 'markerfacecolor', c.pink_sunset, 'markeredgecolor', c.black, 'markerfacealpha', 1.0 )
scatter( 0,   g_end( 2 ), 300, 'square', 'markerfacecolor', c.white, 'markeredgecolor', c.black, 'markerfacealpha', 1.0 )

text( -0.75, g_start( 2 ), 'Start $\mathbf{p}_i$' , 'fontsize', fs)
text( -0.75, g_end( 2 ), 'Goal $\mathbf{g}$'   , 'fontsize', fs )


% xlabel( '$X$ (m)', 'fontsize', fs )
% ylabel( '$Y$ (m)', 'fontsize', fs )
axis equal
set( gca, 'xlim', [-1.1, 1.1] , 'ylim', [-0.2, 2.4], 'xtick', [-1.0, 0.0, 1.0], 'ytick', [0.0, 1.0, 2.0], 'fontsize', 1.2*fs )

mySaveFig( gcf, 'goal_directed_discrete_task_space_stretch' )

%% (--) Goal directed Discrete Movement - Task-Space, Fully Streched #2
% Plotting the torque profile 
% First, plotting the determinant of the Jacobian matrix


clear data*; clc;
close all;

subplot( 2, 1, 1 )

% ============================ Movement Primitives ==================================== %
data_move = load( '../results/discrete_move_task_space_wo_redund/movement/vertical_stretch/ctrl_task_dmp.mat'  );

% =============================== Motor Primitives ==================================== %
data_motor = load( '../results/discrete_move_task_space_wo_redund/motor/vertical_stretch/ctrl_task_imp.mat' );

hold on
Ntmp = length( data_move.t_arr );
det_arr_move = zeros( 1, Ntmp );
for i = 1 : Ntmp
%     det_arr_move( i ) = det( data_move.J_arr( :, : , i ) );
    [~,S,~] = svd( data_move.J_arr( :, : , i ) );
    S = diag( S );
    det_arr_move( i ) = min( S )/max( S );
end

Ntmp = length( data_motor.t_arr );
det_arr_motor = zeros( 1, Ntmp );
for i = 1 : Ntmp
%     det_arr_motor( i ) = det( data_motor.J_arr( :, 1:2, i ) );
    [~,S,~] = svd( data_motor.J_arr( :, : , i ) );
    S = diag( S );
    det_arr_motor( i ) = min( S )/max( S );
end

text( -0.3, 1.0,'E', 'fontsize', 30)

plot( data_move.t_arr,  det_arr_move, 'color', c.blue, 'linewidth', 8  )
plot( data_motor.t_arr, det_arr_motor, 'color', c.orange, 'linewidth', 8 )
xlabel( '$t$ (sec)', 'fontsize', 30 )
title( '$\sigma_{min}(\mathbf{J}(\mathbf{q}))/\sigma_{max}(\mathbf{J}(\mathbf{q}))$ (-)', 'fontsize', 0.7*fs )
set( gca, 'xlim', [0,3], 'xtick', [ 0, 1.0, 2.0, 3.0], 'ylim', [0,0.7], 'ytick', [0.0,0.35, 0.7],'xticklabel', { '0', '1.0', '2.0','3.0' }, 'fontsize', 0.7*fs )
legend( 'Dynamic Movement Primitives', 'Elementary Dynamic Actions', 'fontsize',0.7* fs, 'location', 'northeast' )

mySaveFig( gcf, 'goal_directed_discrete_task_space_stretch2' )

%% ==================================================================
%% (--) Goal directed Discrete Movement - With Redundancy #1
% All data generated by "main_task_trajectory_redund.py"
clear data*; clc;
close all;
mode = "BOTH";
% ============================ Movement Primitives ==================================== %

file_name1 = '../results/discrete_move_task_space_w_redund/movement/ctrl_task_dmp.mat';
file_name2 = '../results/discrete_move_task_space_w_redund/movement/dmpx.mat';
file_name3 = '../results/discrete_move_task_space_w_redund/movement/dmpy.mat';

data_move{ 1 }  = load( file_name1 );
data_move{ 2 }  = load( file_name2 );
data_move{ 3 }  = load( file_name3 );


% =============================== Motor Primitives ==================================== %
file_name1 = '../results/discrete_move_task_space_w_redund/motor/ctrl_joint_imp.mat';
file_name2 = '../results/discrete_move_task_space_w_redund/motor/ctrl_task_imp.mat';
data_motor{ 1 } = load( file_name1 );
data_motor{ 2 } = load( file_name2 );

clear file*

subplot( 2, 2, [3,4] )
hold on

% The start and end of the movement
p0i =  data_motor{ 2 }.p0i;  p0f =  data_motor{ 2 }.p0f;


if mode == "MOVEMENT" || mode == "BOTH"
    plot(  data_move{ 1 }.p_arr( 1, : ),  data_move{ 1 }.p_arr( 2, : ), 'linewidth', 8, 'color', c.blue )
end

if mode == "MOTOR"    || mode == "BOTH"
    plot( data_motor{ 2 }.p_arr( 1 , : ), data_motor{ 2 }.p_arr( 2 , : ), 'linewidth',8, 'color', c.orange )
end


set( gca, 'xlim', [-.2, 3.2], 'ylim', [ 2.8, 3.2], 'ytick', [2.8, 3.0,3.2],'yticklabel', {'2.8', '3.0', '3.2'} ,'fontsize', fs )

% Adding text onto the figure
text( p0i( 1 )    , p0i( 2 ) +0.06, 'Start $\mathbf{p}_i$', 'fontsize', fs )
text( p0f( 1 )-0.2, p0f( 2 ) +0.06, 'Goal $\mathbf{g}$'   , 'fontsize', fs )
scatter( p0i( 1 ), p0i( 2 ), 600, 'square', 'markerfacecolor', c.black, 'markeredgecolor', c.black, 'markerfacealpha', 0.8 )
scatter( p0f( 1 ), p0f( 2 ), 600,      'o', 'markerfacecolor', c.black, 'markeredgecolor', c.black, 'markerfacealpha', 0.8 )

if mode == "MOVEMENT" 
    legend( '', 'Dynamic Movement Primitives', 'location', 'northwest', 'fontsize', fs  )
elseif mode == "MOTOR"
    legend( '', 'Elementary Dynamic Actions'   , 'location', 'northwest', 'fontsize', fs  )
else
%     legend( 'Dynamic Movement Primitives', 'Elementary Dynamic Actions', 'location', 'southwest', 'fontsize', fs  )
end
xlabel(  '$X$ (m)', 'fontsize', 1.1*fs );
ylabel(  '$Y$ (m)', 'fontsize', fs );
set( gca, 'xtick', [0:1:3] );

if mode == "MOVEMENT" || mode == "BOTH"
    subplot( 2, 2, 1 )
    hold on
    plot( p0i( 1 : 2 ), p0f( 1 : 2 ), 'linewidth', 4, 'linestyle', '--', 'color', c.black )

    % Get the x, y position of the joints 
    q_abs = cumsum( data_move{1}.q_arr , 1 );
    x_arr = cumsum( cos( q_abs ), 1 );
    y_arr = cumsum( sin( q_abs ), 1 );

    alpha_arr = [1.0, 0.3, 0.3, 1.0];
    idx_arr   = [1, 1000, 1400, 4000];
    lw        = [4, 2, 2, 4];
    for i = 1 : length( idx_arr )
        idx = idx_arr( i );
        alpha = alpha_arr( i );
        scatter( [ 0, x_arr( 1:end-1, idx  )' ] , [ 0, y_arr(1:end-1, idx )' ], 200, 'markerfacecolor', c.black, 'markeredgecolor', c.black, 'MarkerFaceAlpha', alpha,'MarkerEdgeAlpha',alpha  )
        p2 = plot( [ 0, x_arr( :, idx )' ] , [ 0, y_arr( :, idx)' ], 'color', c.black, 'linewidth', lw( i ) );
        p2.Color( 4 ) = alpha;
        scatter( x_arr( end, idx ), y_arr( end, idx  ),  600,  'markerfacecolor', c.blue, 'markeredgecolor', c.blue, 'MarkerFaceAlpha', alpha,'MarkerEdgeAlpha',alpha  )

    end

    set( gca, 'xlim', [ -1.0, 4.0] , 'ylim', [-1.0, 4.0], 'xticklabel', {}, 'yticklabel', {} )
    axis equal
    title( 'Dynamic Movement Primitives', 'fontsize', fs )
    xlabel( '$X$ (m)', 'fontsize', fs )
    ylabel( '$Y$ (m)', 'fontsize', fs )    
end

if mode == "MOTOR" || mode == "BOTH"
    subplot( 2, 2, 2)
    hold on
    plot( p0i( 1 : 2 ), p0f( 1 : 2 ), 'linewidth', 4, 'linestyle', '--', 'color', c.black )

    % Get the x, y position of the joints 
    q_abs = cumsum( data_motor{1}.q_arr , 1 );
    x_arr = cumsum( cos( q_abs ), 1 );
    y_arr = cumsum( sin( q_abs ), 1 );

    alpha_arr = [1.0, 0.3, 0.3, 1.0];
    idx_arr   = [1, 1000, 1400, 4000];
    lw        = [4, 2, 2, 4];
    for i = 1 : length( idx_arr )
        idx = idx_arr( i );
        alpha = alpha_arr( i );
        scatter( [ 0, x_arr( 1:end-1, idx  )' ] , [ 0, y_arr(1:end-1, idx )' ], 200, 'markerfacecolor', c.black, 'markeredgecolor', c.black, 'MarkerFaceAlpha', alpha,'MarkerEdgeAlpha',alpha  )
        p2 = plot( [ 0, x_arr( :, idx )' ] , [ 0, y_arr( :, idx)' ], 'color', c.black, 'linewidth', lw( i ) );
        p2.Color( 4 ) = alpha;
        scatter( x_arr( end, idx ), y_arr( end, idx  ),  600,  'markerfacecolor', c.orange, 'markeredgecolor', c.orange, 'MarkerFaceAlpha', alpha,'MarkerEdgeAlpha',alpha  )

    end

    title( 'Elementary Dynamic Actions', 'fontsize', fs )
    xlabel( '$X$ (m)', 'fontsize', fs )
    ylabel( '$Y$ (m)', 'fontsize', fs )
    set( gca, 'xlim', [ -1.0, 4.0] , 'ylim', [-1.0, 4.0], 'xticklabel', {}, 'yticklabel', {} )
    axis equal
end

mySaveFig( gcf, 'redundancy_end_effector' )


%% (--) Goal directed Discrete Movement - With Redundancy #2
% All data generated by "main_task_trajectory_redund.py"

% Data called from previous section
% Movement primitives, joint angle
subplot( 2, 2, 1 )
plot( data_move{1}.t_arr, data_move{1}.q_arr )
title( 'Dynamic Movement Primitives', 'fontsize', 30 )
ylabel( '$\mathbf{q}(t)$ (rad)' )
set( gca, 'fontsize', 30, 'xlim', [0, 4 ], 'ylim', [ -1, 2], 'xtick', [0, 0.3, 1.0, 2.0, 3.0, 4.0] )

% Movement primitives, joint velocity
subplot( 2, 2, 3 )
plot( data_move{1}.t_arr, data_move{1}.dq_arr )
xlabel( '$t$ (sec)' )
ylabel( '$\dot{\mathbf{q}}(t)$ (rad/s)' )
set( gca, 'fontsize', 30, 'xlim', [0, 4 ], 'ylim', [ -1, 0.5], 'xtick', [0, 0.3, 1.0, 2.0, 3.0, 4.0] )

% Motor primitives, joint angle
subplot( 2, 2, 2)
plot( data_motor{1}.t_arr, data_motor{1}.q_arr )
set( gca, 'fontsize', 30, 'xlim', [0, 4 ], 'ylim', [ -1, 2], 'xtick', [0, 0.3, 1.0, 2.0, 3.0, 4.0] )
title( 'Elementary Dynamic Actions', 'fontsize', 30 )

% Motor primitives, joint velocity
subplot( 2, 2, 4)
plot( data_motor{1}.t_arr, data_motor{1}.dq_arr )
xlabel( '$t$ (sec)' )
set( gca, 'fontsize', 30, 'xlim', [0, 4 ], 'ylim', [ -1, 0.5], 'xtick', [0, 0.3, 1.0, 2.0, 3.0, 4.0] )
legend( '$q_1$', '$q_2$', '$q_3$', '$q_4$', '$q_5$', 'location', 'southeast')
mySaveFig( gcf, 'redundancy_joint_trajs' )

%% ==================================================================
%% (--) Goal directed Discrete Movement - With Redundancy, Sequence #1
% All data generated by "main_task_trajectory_redund.py"
clear data*; clc;

% ============================ Movement Primitives ==================================== %

file_name1 = '../results/discrete_move_task_space_w_redund2/movement/ctrl_task_dmp.mat';
file_name2 = '../results/discrete_move_task_space_w_redund2/movement/dmpx.mat';
file_name3 = '../results/discrete_move_task_space_w_redund2/movement/dmpy.mat';

data_move{ 1 }  = load( file_name1 );
data_move{ 2 }  = load( file_name2 );
data_move{ 3 }  = load( file_name3 );


% =============================== Motor Primitives ==================================== %
file_name1 = '../results/discrete_move_task_space_w_redund2/motor/ctrl_joint_imp.mat';
file_name2 = '../results/discrete_move_task_space_w_redund2/motor/ctrl_task_imp.mat';
data_motor{ 1 } = load( file_name1 );
data_motor{ 2 } = load( file_name2 );

clear file*

subplot( 2, 2, [3,4] )
hold on

% The start and end of the movement
p0i =  data_motor{ 2 }.p0i( 1, 1:2 );  p0f =  data_motor{ 2 }.p0f( 1, 1:2 );

% Second goal
g_old = p0i + [ -2.0, 1.0 ];
g_new = g_old + [  6.0, 1.5 ];

plot(  data_move{ 1 }.p_arr( 1, : ),  data_move{ 1 }.p_arr( 2, : ), 'linewidth', 8, 'color', c.blue )
plot( data_motor{ 2 }.p_arr( 1 , : ), data_motor{ 2 }.p_arr( 2 , : ), 'linewidth',8, 'color', c.orange )
xlabel( '$X$ (m)', 'fontsize', fs )
ylabel( '$Y$ (m)', 'fontsize', fs )
text( p0i( 1 ) +0.1, p0i( 2 ), 'Start $\mathbf{p}_{i}$' , 'fontsize', fs);
text( g_old( 1 ) - 0.1, g_old( 2 ) - 0.3, '$\mathbf{g}_{old}$' , 'fontsize', fs);
text( g_new( 1 ) - 0.1, g_new( 2 ) - 0.3, '$\mathbf{g}_{new}$' , 'fontsize', fs );

% The old/new goal location, as square markers 
scatter( p0i( 1 ), p0i( 2 ), 300, 'o', 'markerfacecolor', c.black, 'markeredgecolor', c.black, 'markerfacealpha', 0.8 )
scatter( g_old( 1 ), g_old( 2 ), 300, 'square', 'markerfacecolor', c.black, 'markeredgecolor', c.black, 'markerfacealpha', 0.3 )
scatter( g_new( 1 ), g_new( 2 ), 300, 'square', 'markerfacecolor', c.black, 'markeredgecolor', c.black, 'markerfacealpha', 0.8 )
set( gca, 'fontsize', fs, 'xlim', [-4, 4], 'xtick', [-4:4:4], 'ylim', [0, 4], 'ytick', [0:2:4] )
% legend( 'Dynamic Movement Primitives', 'Elementary Dynamic Actions', 'location', 'northwest', 'fontsize', 30  )


subplot( 2, 2, 1 )
hold on

% Get the x, y position of the joints 
q_abs = cumsum( data_move{1}.q_arr , 1 );
x_arr = cumsum( cos( q_abs ), 1 );
y_arr = cumsum( sin( q_abs ), 1 );

alpha_arr = [1.0, 0.3, 0.3, 1.0];
idx_arr   = [1, 1200, 1800, 5000];
lw        = [4,2,2,4];
for i = 1 : length( idx_arr )
    idx = idx_arr( i );
    alpha = alpha_arr( i );
    scatter( [ 0, x_arr( 1:end-1, idx  )' ] , [ 0, y_arr(1:end-1, idx )' ], 200, 'markerfacecolor', c.black, 'markeredgecolor', c.black, 'MarkerFaceAlpha', alpha,'MarkerEdgeAlpha',alpha  )
    p2 = plot( [ 0, x_arr( :, idx )' ] , [ 0, y_arr( :, idx)' ], 'color', c.black, 'linewidth', lw( i ) );
    p2.Color( 4 ) = alpha;
    scatter( x_arr( end, idx ), y_arr( end, idx  ),  600,  'markerfacecolor', c.blue, 'markeredgecolor', c.blue, 'MarkerFaceAlpha', alpha,'MarkerEdgeAlpha',alpha  )

end

plot(  data_move{ 1 }.p_arr( 1, : ),  data_move{ 1 }.p_arr( 2, : ), 'linewidth', 8, 'color', c.blue )


set( gca, 'xlim', [ -1.0, 4.0] , 'ylim', [-1.0, 4.0], 'xticklabel', {}, 'yticklabel', {} )
axis equal
title( 'Dynamic Movement Primitives', 'fontsize', fs )
xlabel( '$X$ (m)', 'fontsize', fs )
ylabel( '$Y$ (m)', 'fontsize', fs )    


subplot( 2, 2, 2)
hold on

% Get the x, y position of the joints 
q_abs = cumsum( data_motor{1}.q_arr , 1 );
x_arr = cumsum( cos( q_abs ), 1 );
y_arr = cumsum( sin( q_abs ), 1 );

plot( data_motor{ 2 }.p_arr( 1 , : ), data_motor{ 2 }.p_arr( 2 , : ), 'linewidth',8, 'color', c.orange )


alpha_arr = [1.0, 0.3, 0.3, 1.0];
idx_arr   = [1, 1200, 2500, 5000];
for i = 1 : length( idx_arr )
    idx = idx_arr( i );
    alpha = alpha_arr( i );
    scatter( [ 0, x_arr( 1:end-1, idx  )' ] , [ 0, y_arr(1:end-1, idx )' ], 200, 'markerfacecolor', c.black, 'markeredgecolor', c.black, 'MarkerFaceAlpha', alpha,'MarkerEdgeAlpha',alpha  )
    p2 = plot( [ 0, x_arr( :, idx )' ] , [ 0, y_arr( :, idx)' ], 'color', c.black, 'linewidth', 4 );
    p2.Color( 4 ) = alpha;
    scatter( x_arr( end, idx ), y_arr( end, idx  ),  600,  'markerfacecolor', c.orange, 'markeredgecolor', c.orange, 'MarkerFaceAlpha', alpha,'MarkerEdgeAlpha',alpha  )

end

title( 'Elementary Dynamic Actions', 'fontsize', fs )
xlabel( '$X$ (m)', 'fontsize', fs )
ylabel( '$Y$ (m)', 'fontsize', fs )
set( gca, 'xlim', [ -1.0, 4.0] , 'ylim', [-1.0, 4.0], 'xticklabel', {}, 'yticklabel', {} )
axis equal


mySaveFig( gcf, 'redundancy_end_effector_sequence1' )



%% ==================================================================
%% (--) Sequence of Discrete Movements #1
% All data generated by "main_sequence_movement.py"

clear data*; clc;
close all;


mode = "BOTH";

% ============================ Movement Primitives ==================================== %
file_name1 = '../results/sequence/movement/ctrl_task_dmp.mat';
file_name2 = '../results/sequence/movement/dmpx.mat';
file_name3 = '../results/sequence/movement/dmpy.mat';

data_move{ 1 }  = load( file_name1 );
data_move{ 2 }  = load( file_name2 );
data_move{ 3 }  = load( file_name3 );


% =============================== Motor Primitives ==================================== %
file_name1 = '../results/sequence/motor/ctrl_task_imp.mat';
data_motor{ 1 } = load( file_name1 );
clear file*

% Get the initial end-effector position 
g_old = data_motor{ 1 }.p0i( 1, : ) + [ -0.7, 0.7, 0. ];
g_new = g_old + [ 1.5, 0.5, 0. ];
 
subplot( 2, 2, [1,3] )
hold on

% Plotting the end-effector trace
if mode == "MOVEMENT" || mode == "BOTH"
    plot( data_move{ 1 }.p_arr( 1, : ), data_move{ 1 }.p_arr( 2, : ), 'linewidth', 8, 'color', c.blue)
end
if mode == "MOTOR" || mode == "BOTH"
    plot( data_motor{ 1 }.p_arr( 1, : ), data_motor{ 1 }.p_arr( 2, : ), 'linewidth', 8, 'color', c.orange  )
end

% The old/new goal location, as square markers 
scatter( g_old( 1 ), g_old( 2 ), 600, 'square', 'markerfacecolor', c.black, 'markeredgecolor', c.black, 'markerfacealpha', 0.3 )
scatter( g_new( 1 ), g_new( 2 ), 600, 'square', 'markerfacecolor', c.black, 'markeredgecolor', c.black, 'markerfacealpha', 0.8 )

% The initial location
scatter( data_motor{ 1 }.p0i( 1, 1 ), data_motor{ 1 }.p0i( 1, 2 ), 600, 'o', 'markerfacecolor', c.black, 'markeredgecolor', c.black )
xlabel( '$X$ (m)', 'fontsize', 35 )
ylabel( '$Y$ (m)', 'fontsize', 35 )
text( g_old( 1 ) - 0.5, g_old( 2 ) + 0.05, '$\mathbf{g}_{old}$', 'fontsize', fs );
text( g_new( 1 ) - 0.1, g_new( 2 ) + 0.10, '$\mathbf{g}_{new}$', 'fontsize', fs );
text( data_motor{ 1 }.p0i( 1, 1 ) +0.2,  data_motor{ 1 }.p0i( 1, 2 ), 'Start $\mathbf{p}_{i}$', 'fontsize', fs );

if mode == "MOVEMENT" 
    legend( 'Dynamic Movement Primitives', 'location', 'northwest', 'fontsize', fs)
elseif mode == "MOTOR"
    legend( 'Elementary Dynamic Actions', 'location', 'northwest', 'fontsize', fs  )
else
    legend( 'Dynamic Movement Primitives', 'Elementary Dynamic Actions', 'location', 'southwest', 'fontsize', fs  )
end


set( gca, 'fontsize', fs, 'xlim', [-1.5, 1.5], 'ylim', [-0.0, 2.0] )

if mode == "MOVEMENT" || mode == "BOTH"
    subplot( 2, 2, 2 )
    hold on

    % Get the x, y position of the joints 
    q_abs = cumsum( data_move{1}.q_arr , 1 );
    x_arr = cumsum( cos( q_abs ), 1 );
    y_arr = cumsum( sin( q_abs ), 1 );

    alpha_arr = [1.0, 0.4, 0.4, 1.0];
    idx_arr   = [1, 1000, 1800, 7000];
    lw        = [4, 2, 2, 4];
    for i = 1 : length( idx_arr )
        idx = idx_arr( i );
        alpha = alpha_arr( i );
        scatter( [ 0; x_arr( 1:end-1, idx ) ] , [ 0; y_arr( 1:end-1, idx ) ], 300, 'markerfacecolor', c.black, 'markeredgecolor', c.black, 'MarkerFaceAlpha', alpha,'MarkerEdgeAlpha',alpha  )
        p2 = plot( [ 0; x_arr( :, idx ) ] , [ 0; y_arr( :, idx ) ], 'color', c.black, 'linewidth',lw( i ) );
        p2.Color( 4 ) = alpha;
        scatter( x_arr( end, idx ), y_arr( end, idx ),  900,  'markerfacecolor', c.blue, 'markeredgecolor', c.blue, 'MarkerFaceAlpha', alpha,'MarkerEdgeAlpha',alpha  )

    end
    plot( x_arr( 2, : ) , y_arr( 2, : ), 'color',c.blue, 'linewidth', 8 ) 
    scatter( g_old( 1 ), g_old( 2 ), 300, 'square', 'markerfacecolor', c.black, 'markeredgecolor', c.black, 'markerfacealpha', 0.3 )
    scatter( g_new( 1 ), g_new( 2 ), 300, 'square', 'markerfacecolor', c.black, 'markeredgecolor', c.black, 'markerfacealpha', 0.8 )

    text( g_old( 1 ) - 0.4, g_old( 2 ) - 0.2, '$\mathbf{g}_{old}$', 'fontsize', fs );
    text( g_new( 1 ) + 0.2, g_new( 2 ) - 0.1, '$\mathbf{g}_{new}$', 'fontsize', fs );

    
    set( gca, 'xticklabel', {}, 'yticklabel', {} ,'xlim', [ -1.0, 1.0], 'ylim', [-0.1, 1.9 ] )
    axis equal
%     title( 'Dynamic Movement Primitives', 'fontsize', 30 )
    ylb = ylabel( '$Y$ (m)', 'fontsize', fs );
    ylb.Position( 1 ) = ylb.Position( 1 ) - 0.2;
    ylb.Position( 2 ) = ylb.Position( 2 ) - 1.5;
end

if mode == "MOTOR" || mode == "BOTH"
    subplot( 2, 2, 4 )
    hold on
    q_abs = cumsum( data_motor{ 1 }.q_arr , 1 );
    x_arr = cumsum( cos( q_abs ), 1 );
    y_arr = cumsum( sin( q_abs ), 1 );

    alpha_arr = [1.0, 0.4, 0.4, 1.0];
    idx_arr   = [1, 800, 1050, 5000];
    lw        = [4, 2, 2, 4];
    for i = 1 : length( idx_arr )
        idx = idx_arr( i );
        alpha = alpha_arr( i );
        scatter( [ 0; x_arr( 1:end-1, idx ) ] , [ 0; y_arr( 1:end-1, idx ) ], 300, 'markerfacecolor', c.black, 'markeredgecolor', c.black, 'MarkerFaceAlpha', alpha,'MarkerEdgeAlpha',alpha  )
        p2 = plot( [ 0; x_arr( :, idx ) ] , [ 0; y_arr( :, idx ) ], 'color', c.black, 'linewidth', lw( i ) );
        p2.Color( 4 ) = alpha;
        scatter( x_arr( end, idx ), y_arr( end, idx ),  900,  'markerfacecolor', c.orange, 'markeredgecolor', c.orange, 'MarkerFaceAlpha', alpha,'MarkerEdgeAlpha',alpha  )

    end
    plot( x_arr( 2, :) , y_arr( 2, : ), 'color',c.orange, 'linewidth', 8 ) 
    scatter( g_old( 1 ), g_old( 2 ), 300, 'square', 'markerfacecolor', c.black, 'markeredgecolor', c.black, 'markerfacealpha', 0.3 )
    scatter( g_new( 1 ), g_new( 2 ), 300, 'square', 'markerfacecolor', c.black, 'markeredgecolor', c.black, 'markerfacealpha', 0.8 )

    text( g_old( 1 ) - 0.4, g_old( 2 ) - 0.2, '$\mathbf{g}_{old}$', 'fontsize', fs );
    text( g_new( 1 ) + 0.2, g_new( 2 ) - 0.1, '$\mathbf{g}_{new}$', 'fontsize', fs );
    
    set( gca, 'xticklabel', {}, 'yticklabel', {},'xlim', [ -1.0, 1.0], 'ylim', [-0.1, 1.9 ] )
    axis equal
%     title( 'Elementary Dynamic Actions', 'fontsize', 30 )
    xlabel( '$X$ (m)', 'fontsize', fs )
end

mySaveFig( gcf, 'sequence_figure1' )


%% (--) Sequence of Discrete Movements #2
% All data generated by "main_sequence_movement.py"
close all;
mode = "BOTH";

% Data called from previous section
subplot( 2, 1, 1 )
hold on
ylabel( '$X$ (m)', 'fontsize', fs )

if mode == "MOVEMENT" || mode == "BOTH"
    plot( data_move{1}.t_arr, data_move{1}.p_arr( 1, : ), 'linewidth', 8, 'color', c.blue )
end

if mode == "MOTOR" || mode == "BOTH"
    plot( data_motor{1}.t_arr, data_motor{1}.p_arr( 1, : ), 'linewidth', 8, 'color', c.orange )
end    

xline( 0.5, 'linewidth', 6, 'linestyle', '--' )
set( gca, 'fontsize', fs, 'xlim', [0.0, 4], 'xtick', [ 0, 0.5, 1, 2, 3, 4 ],'ylim', [-1, 1], 'xticklabel', {} )
           

yyaxis right
ax = gca;
ax.YAxis(1).Color = 'k';
ax.YAxis(2).Color = 'k';
set( gca, 'ytick', [ g_old( 1 ), g_new( 1 ) ], 'ylim', [-1,1], 'yticklabel', { '$g_{old,x}$', '$g_{new,x}$'} )
yline( g_old( 1 ), 'linestyle' ,'--','linewidth', 3 )
yline( g_new( 1 ), 'linestyle' ,'--','linewidth', 3 )

if mode == "MOVEMENT" 
    legend( 'Dynamic Movement Primitives', 'location', 'southeast', 'fontsize', fs )
elseif mode == "MOTOR"
    legend( 'Elementary Dynamic Actions', 'location', 'southeast', 'fontsize', fs  )
else
    legend( 'Dynamic Movement Primitives', 'Elementary Dynamic Actions', 'location', 'southeast', 'fontsize', fs )
end

subplot( 2, 1, 2 )
hold on
xlabel( '$t$ (sec)', 'fontsize', fs )
ylabel( '$Y$ (m)', 'fontsize',fs  )

if mode == "MOVEMENT" || mode == "BOTH"
    plot( data_move{1}.t_arr , data_move{1}.p_arr( 2, : ), 'linewidth', 8, 'color', c.blue )
end

if mode == "MOTOR" || mode == "BOTH"
    plot( data_motor{1}.t_arr, data_motor{1}.p_arr( 2, : ), 'linewidth', 8, 'color', c.orange )
end    
xline( 0.5, 'linewidth', 6, 'linestyle', '--' )
set( gca, 'fontsize', fs, 'xlim', [0, 4], 'xtick', [ 0, 0.5, 1, 2, 3, 4 ], 'ylim', [0, 2], 'xticklabel', { '0', '$t_g$', '', 2, '', 4} )



yyaxis right
ax = gca;
ax.YAxis(1).Color = 'k';
ax.YAxis(2).Color = 'k';
set( gca, 'ytick', [ g_old( 2 ), g_new( 2 ) ], 'yticklabel', { '$g_{old,y}$', '$g_{new,y}$'}, 'ylim', [0,2] )

yline( g_old( 2 ), 'linestyle' ,'--','linewidth', 3 )
yline( g_new( 2 ), 'linestyle' ,'--','linewidth', 3 )

mySaveFig( gcf, 'sequence_figure2' )



%% ==================================================================
%% (--) Task-space Trajectory Tracking --- Rhythmic, Task-space
% All data generated by "main_task_trajectory_rhythmic.py"

clear data*; clc;
close all;

% ============================ Movement Primitives ==================================== %
file_name1 = '../results/rhythmic_task_space/movement/ctrl_task_dmp.mat';
file_name2 = '../results/rhythmic_task_space/movement/dmp_rhythmicx.mat';
file_name3 = '../results/rhythmic_task_space/movement/dmp_rhythmicy.mat';

data_move{ 1 }  = load( file_name1 );
data_move{ 2 }  = load( file_name2 );
data_move{ 3 }  = load( file_name3 );


% =============================== Motor Primitives ==================================== %
file_name1 = '../results/rhythmic_task_space/motor/ctrl_task_imp.mat';
data_motor{ 1 } = load( file_name1 );
clear file*

% Dynamic Movement Primitives
% subplot( 1, 2, 1 )
% hold on
% 
% % The center of the circle
% centers = data_motor{1}.centers;
% r = data_motor{1}.amps;
% 
% plot( data_move{ 1 }.p_arr( 1, : ) -centers( 1 ), data_move{ 1 }.p_arr( 2, : ) -centers( 2 ), 'linewidth', 6, 'color', c.blue )
% plot( r * cos( 0:0.001:2*pi ),  r * sin( 0:0.001:2*pi ), 'linewidth', 3, 'linestyle', '--', 'color', 'k')
%  
% xlabel( '$X$ (m)', 'fontsize', 30 )
% ylabel( '$Y$ (m)', 'fontsize', 30 )
% axis equal
% set( gca, 'xlim', [-0.6, 0.60001], 'ylim', [-0.6, 0.60001], 'fontsize', 30 )
% title( 'Dynamic Movement Primitives', 'fontsize', 30 )
% 
% % Elementary Dynamic Actions
% subplot( 1, 2, 2)
% hold on
% 
% plot( data_motor{ 1 }.p_arr( 1, : )-centers(1), data_motor{ 1 }.p_arr( 2, : )- centers(2), 'linewidth', 6, 'color', c.orange )
% plot( r * cos( 0:0.001:2*pi ),  r * sin( 0:0.001:2*pi ), 'linewidth', 3, 'linestyle', '--', 'color', 'k')
%  
% xlabel( '$X$ (m)', 'fontsize', 30 )
% ylabel( '$Y$ (m)', 'fontsize', 30 )
% axis equal
% set( gca, 'xlim', [-0.6, 0.60001], 'ylim', [-0.6, 0.60001], 'fontsize', 30 )
% title( 'Elementary Dynamic Actions', 'fontsize', 30 )
% 
% mySaveFig( gcf,  'task_space_rhythmic_task_space' )

% Generate a New figure

figure( )

% Dynamic Movement Primitives
subplot( 1, 2, 1 )
hold on

q_abs = cumsum( data_move{ 1 }.q_arr , 1 );
x_arr = cumsum( cos( q_abs ), 1 );
y_arr = cumsum( sin( q_abs ), 1 );

plot( data_move{ 1 }.p_command( 1, : ), data_move{ 1 }.p_command( 2, : ), 'linewidth', 6, 'color', c.blue )
plot( r * cos( 0:0.001:2*pi ) + centers( 1 ),  r * sin( 0:0.001:2*pi )+ centers( 2 ), 'linewidth', 3, 'linestyle', '--', 'color', 'k')
 

alpha_arr = 0.8*[1.0, 1.0, 1.0, 1.0];
idx_arr   = [1, 500, 1000, 1500];
for i = 1 : length( idx_arr )
    idx = idx_arr( i );
    alpha = alpha_arr( i );
    scatter( [ 0; x_arr( 1:end-1, idx ) ] , [ 0; y_arr( 1:end-1, idx ) ], 300, 'markerfacecolor', c.black, 'markeredgecolor', c.black, 'MarkerFaceAlpha', alpha,'MarkerEdgeAlpha',alpha  )
    p2 = plot( [ 0; x_arr( :, idx ) ] , [ 0; y_arr( :, idx ) ], 'color', c.black, 'linewidth', 4 );
    p2.Color( 4 ) = alpha;
    scatter( x_arr( end, idx ), y_arr( end, idx ),  1800,  'markerfacecolor', c.blue, 'markeredgecolor', c.blue, 'MarkerFaceAlpha', alpha,'MarkerEdgeAlpha',alpha  )

end

axis equal
set( gca, 'xlim', [-1.1, 1.1] , 'ylim', [-0.2, 2.2], 'xtick', [-1.0, 0.0, 1.0], 'ytick', [0.0, 1.0, 2.0], 'fontsize', fs ) 
ylabel( '$Y$ (m)', 'fontsize', fs )
title( 'Dynamic Movement Primitives', 'fontsize', fs )

% Dynamic Motor Primitives
subplot( 1, 2, 2 )
hold on

q_abs = cumsum( data_motor{ 1 }.q_arr , 1 );
x_arr = cumsum( cos( q_abs ), 1 );
y_arr = cumsum( sin( q_abs ), 1 );

plot( data_motor{ 1 }.p_arr( 1, : ), data_motor{ 1 }.p_arr( 2, : ), 'linewidth', 6, 'color', c.orange )
plot( r * cos( 0:0.001:2*pi )+ centers( 1 ),  r * sin( 0:0.001:2*pi )+ centers( 2 ), 'linewidth', 3, 'linestyle', '--', 'color', 'k')


alpha_arr = 0.8*[1.0, 1.0, 1.0, 1.0];
idx_arr   = [1, 500, 1000, 1500];
for i = 1 : length( idx_arr )
    idx = idx_arr( i );
    alpha = alpha_arr( i );
    scatter( [ 0; x_arr( 1:end-1, idx ) ] , [ 0; y_arr( 1:end-1, idx ) ], 300, 'markerfacecolor', c.black, 'markeredgecolor', c.black, 'MarkerFaceAlpha', alpha,'MarkerEdgeAlpha',alpha  )
    p2 = plot( [ 0; x_arr( :, idx ) ] , [ 0; y_arr( :, idx ) ], 'color', c.black, 'linewidth', 4 );
    p2.Color( 4 ) = alpha;
    scatter( x_arr( end, idx ), y_arr( end, idx ),  1800,  'markerfacecolor', c.orange, 'markeredgecolor', c.orange, 'MarkerFaceAlpha', alpha,'MarkerEdgeAlpha',alpha  )

end
axis equal
set( gca, 'xlim', [-1.1, 1.1] , 'ylim', [-0.2, 2.2], 'xtick', [-1.0, 0.0, 1.0], 'ytick', [0.0, 1.0, 2.0], 'fontsize', fs ) 

xlb = xlabel( '$X$ (m)', 'fontsize', fs );
xlb.Position( 1 ) = xlb.Position( 1 ) - 1.5;
xlb.Position( 2 ) = xlb.Position( 2 ) - 0.1;
title( 'Elementary Dynamic Actions', 'fontsize', fs )
mySaveFig( gcf,  'task_space_rhythmic_task_space_screenshots' )


%% (--) Task-space Trajectory Tracking --- Rhythmic, Joint-space

clear data*; clc;
close all;

% ============================ Movement Primitives ==================================== %
file_name1 = '../results/rhythmic_joint_space/movement/ctrl_joint_dmp.mat';
file_name2 = '../results/rhythmic_joint_space/movement/dmp_rhythmicq1.mat';
file_name3 = '../results/rhythmic_joint_space/movement/dmp_rhythmicq2.mat';

data_move{ 1 }  = load( file_name1 );
data_move{ 2 }  = load( file_name2 );
data_move{ 3 }  = load( file_name3 );

% =============================== Motor Primitives ==================================== %
file_name1 = '../results/rhythmic_joint_space/motor/ctrl_joint_imp.mat';
data_motor{ 1 } = load( file_name1 );
clear file*

% Dynamic Movement Primitives
subplot( 2, 1, 1 )
hold on 
q_abs = cumsum( data_move{ 1 }.q_arr , 1 );

plot( data_move{ 1 }.t_arr, data_move{ 1 }.q_arr( 1, : ), 'linewidth', 8, 'color', c.blue )
plot( data_motor{ 1 }.t_arr, data_motor{ 1 }.q_arr( 1, : ), 'linewidth', 8, 'color', c.orange )
plot( data_motor{ 1 }.t_arr, data_motor{ 1 }.q0_arr( 1, : ), 'linewidth', 6, 'color', c.black, 'linestyle', '--' )

set( gca, 'ylim', [0.1, 0.9], 'xlim', [0, 8], 'ytick', [0.0:0.3:0.9], 'fontsize', fs, 'xticklabel', {} )
% legend( 'Dynamic Movement Primitives', 'Elementary Dynamic Actions', 'fontsize', fs )
ylabel( 'Joint1, $q_1(t)$ (rad)', 'fontsize', fs  )
% xlabel( '$t$ (sec)', 'fontsize', fs )

% Dynamic Motor Primitives
subplot( 2, 1, 2 )
hold on 
q_abs = cumsum( data_motor{ 1 }.q_arr , 1 );
x_arr = cumsum( cos( q_abs ), 1 );
y_arr = cumsum( sin( q_abs ), 1 );

plot( data_move{ 1 }.t_arr, data_move{ 1 }.q_arr( 2, : ), 'linewidth', 8, 'color', c.blue )
plot( data_motor{ 1 }.t_arr, data_motor{ 1 }.q_arr( 2, : ), 'linewidth', 8, 'color', c.orange )
plot( data_motor{ 1 }.t_arr, data_motor{ 1 }.q0_arr( 2, : ), 'linewidth', 6, 'color', c.black, 'linestyle', '--' )

set( gca, 'ylim', [0.1, 0.9], 'xlim', [0, 8], 'ytick', [0.0:0.3:0.9], 'fontsize', fs )
ylabel( 'Joint2, $q_2(t)$ (rad)', 'fontsize', fs  )
xlabel( '$t$ (sec)', 'fontsize', fs )

mySaveFig( gcf,  'task_space_rhythmic_joint_space1' )


% Another plot
subplot( 1, 2, 1 )
hold on
q_abs = cumsum( data_move{ 1 }.q_arr , 1 );
x_arr = cumsum( cos( q_abs ), 1 );
y_arr = cumsum( sin( q_abs ), 1 );

Ntmp = 20;
alpha_arr = 0.5 * ones( 1, Ntmp  );
idx_arr   = 100 * [1:Ntmp ];
for i = 1 : length( idx_arr )
    idx = idx_arr( i );
    alpha = alpha_arr( i );
    scatter( [ 0, x_arr( 1:end-1, idx  )' ] , [ 0, y_arr(1:end-1, idx )' ], 200, 'markerfacecolor', c.black, 'markeredgecolor', c.black, 'MarkerFaceAlpha', alpha,'MarkerEdgeAlpha',alpha  )
    p2 = plot( [ 0, x_arr( :, idx )' ] , [ 0, y_arr( :, idx)' ], 'color', c.black, 'linewidth', 4 );
    p2.Color( 4 ) = alpha;
    scatter( x_arr( end, idx ), y_arr( end, idx  ),  600,  'markerfacecolor', c.blue, 'markeredgecolor', c.blue, 'MarkerFaceAlpha', alpha,'MarkerEdgeAlpha',alpha  )

end

axis equal
set( gca, 'xlim', [-0.2, 2.0] , 'ylim', [-0.2, 2.0], 'xtick', [ 0.0, 1.0 , 2.0], 'ytick', [0.0, 1.0 , 2.0], 'fontsize', fs ) 
ylabel( '$Y$ (m)', 'fontsize', fs )
% t1 = title( 'Dynamic Movement Primitives', 'fontsize', fs );
% t1.Position( 2 ) = t1.Position( 2 ) + 0.1;


subplot( 1, 2, 2 )
hold on
q_abs = cumsum( data_motor{ 1 }.q_arr , 1 );
x_arr = cumsum( cos( q_abs ), 1 );
y_arr = cumsum( sin( q_abs ), 1 );


Ntmp = 20;
alpha_arr = 0.5 * ones( 1, Ntmp  );
idx_arr   = 100 * [1:Ntmp ];
for i = 1 : length( idx_arr )
    idx = idx_arr( i );
    alpha = alpha_arr( i );
    scatter( [ 0, x_arr( 1:end-1, idx  )' ] , [ 0, y_arr(1:end-1, idx )' ], 200, 'markerfacecolor', c.black, 'markeredgecolor', c.black, 'MarkerFaceAlpha', alpha,'MarkerEdgeAlpha',alpha  )
    p2 = plot( [ 0, x_arr( :, idx )' ] , [ 0, y_arr( :, idx)' ], 'color', c.black, 'linewidth', 4 );
    p2.Color( 4 ) = alpha;
    scatter( x_arr( end, idx ), y_arr( end, idx  ),  600,  'markerfacecolor', c.orange, 'markeredgecolor', c.orange, 'MarkerFaceAlpha', alpha,'MarkerEdgeAlpha',alpha  )

end

axis equal
set( gca, 'xlim', [-0.2, 2.0] , 'ylim', [-0.2, 2.0], 'xtick', [ 0.0, 1.0 , 2.0], 'ytick', [0.0, 1.0 , 2.0], 'fontsize', fs ) 
xlb = xlabel( '$X$ (m)', 'fontsize', fs );
xlb.Position( 1 ) = xlb.Position( 1 ) - 1.5;
xlb.Position( 2 ) = xlb.Position( 2 ) - 0.1;
% t2 = title( 'Elementary Dynamic Actions', 'fontsize', fs );
% t2.Position( 2 ) = t2.Position( 2 ) + 0.1;

mySaveFig( gcf,  'task_space_rhythmic_joint_space2' )

%% ==================================================================
%% (--) Discrete and Rhythmic Movements --- Joint 1
% All data generated by "main_discrete_and_rhythmic.py"
clear data*
close all; clc; 
% ============================ Movement Primitives ==================================== %
file_name1 = '../results/discrete_and_rhythmic_joint/movement/ctrl_joint_dmp.mat';
file_name2 = '../results/discrete_and_rhythmic_joint/movement/dmp_goal_details.mat';
data_move{ 1 }  = load( file_name1 );
data_move{ 2 }  = load( file_name2 );

% =============================== Motor Primitives ==================================== %
file_name1 = '../results/discrete_and_rhythmic_joint/motor/ctrl_joint_imp.mat';
data_motor{ 1 } = load( file_name1 );

% Dynamic Movement Primitives
subplot( 2, 2, 1 )
hold on
plot( data_move{ 1 }.t_arr, data_move{ 2 }.g( :, 1 ), 'linewidth', 6, 'linestyle', ':', 'color', c.black )
plot( data_move{ 1 }.t_arr, data_move{ 2 }.g0( :, 1 ), 'linewidth', 4, 'color', c.black );
plot( data_move{ 1 }.t_arr, data_move{ 1 }.q_arr( 1, : ), 'linewidth', 8, 'color', c.blue )
% title( 'Dynamic Movement Primitives', 'fontsize', 30 )
ylabel( '$q_1(t)$ (rad)', 'fontsize', fs )
legend( '$g(t)$', '$g_0$', 'location', 'northwest', 'fontsize', fs )
set( gca, 'xlim', [0, 12.0], 'ylim', [0.0, 2.0 ], 'fontsize', fs  )

% Dynamic Movement Primitives
subplot( 2, 2, 3 )
hold on
plot( data_move{ 1 }.t_arr, data_move{ 2 }.g( : ,2 ), 'linewidth', 6, 'linestyle', ':', 'color', c.black )
plot( data_move{ 1 }.t_arr, data_move{ 2 }.g0( :, 2 ), 'linewidth', 4, 'color', c.black )
plot( data_move{ 1 }.t_arr, data_move{ 1 }.q_arr( 2, : ), 'linewidth', 8, 'color', c.blue )
xlabel( '$t$ (sec)', 'fontsize', fs )
ylabel( '$q_2(t)$ (rad)', 'fontsize', fs )
set( gca, 'xlim', [0, 12.0], 'ylim', [0, 2], 'fontsize', fs  )

% Elementary Dynamic Actions
subplot( 2, 2, 2 )
hold on
plot( data_motor{ 1 }.t_arr, data_motor{ 1 }.q_arr( 1, : ), 'linewidth', 8, 'color', c.orange )
plot( data_motor{ 1 }.t_arr, data_motor{ 1 }.q0_arr( 1, :), 'linewidth', 6, 'linestyle', ':', 'color', c.black )

set( gca, 'xlim', [0, 12.0], 'ylim', [0.0, 2.0 ], 'fontsize', fs  )
legend( '','$q_{0,1}(t)$', 'location', 'northwest', 'fontsize', fs )

% title( 'Elementary Dynamic Actions', 'fontsize', 30 )

% Elementary Dynamic Actions
subplot( 2, 2, 4 )
hold on
plot( data_motor{ 1 }.t_arr, data_motor{ 1 }.q_arr( 2, : ), 'linewidth', 8, 'color', c.orange )
plot( data_motor{ 1 }.t_arr, data_motor{ 1 }.q0_arr( 2, :), 'linewidth', 6, 'linestyle', ':', 'color', c.black )

xlabel( '$t$ (sec)', 'fontsize', fs )

set( gca, 'xlim', [0, 12.0], 'ylim', [0, 2],'fontsize', fs  )


mySaveFig( gcf,  'discrete_and_rhythmic_joint1' )

%% (--) Discrete and Rhythmic Movements --- Joint 2
% Another plot
close all;
subplot( 1, 2, 1 )
hold on
q_abs = cumsum( data_move{ 1 }.q_arr , 1 );
x_arr = cumsum( cos( q_abs ), 1 );
y_arr = cumsum( sin( q_abs ), 1 );

Ntmp = 25;
alpha_arr = 0.3 * ones( 1, Ntmp  );
idx_arr   = 10 * [1:Ntmp ];
for i = 1 : length( idx_arr )
    idx = idx_arr( i );
    alpha = alpha_arr( i );
    scatter( [ 0, x_arr( 1:end-1, idx  )' ] , [ 0, y_arr(1:end-1, idx )' ], 200, 'markerfacecolor', c.black, 'markeredgecolor', c.black, 'MarkerFaceAlpha', alpha,'MarkerEdgeAlpha',alpha  )
    p2 = plot( [ 0, x_arr( :, idx )' ] , [ 0, y_arr( :, idx)' ], 'color', c.black, 'linewidth', 4 );
    p2.Color( 4 ) = alpha;
    scatter( x_arr( end, idx ), y_arr( end, idx  ),  600,  'markerfacecolor', c.blue, 'markeredgecolor', c.blue, 'MarkerFaceAlpha', alpha,'MarkerEdgeAlpha',alpha  )

end


alpha_arr = 0.3 * ones( 1, 4 );
idx_arr   = [ 4000, 4100, 4200, 4300 ];
for i = 1 : length( idx_arr )
    idx = idx_arr( i );
    alpha = alpha_arr( i );
    scatter( [ 0, x_arr( 1:end-1, idx  )' ] , [ 0, y_arr(1:end-1, idx )' ], 200, 'markerfacecolor', c.black, 'markeredgecolor', c.black, 'MarkerFaceAlpha', alpha,'MarkerEdgeAlpha',alpha  )
    p2 = plot( [ 0, x_arr( :, idx )' ] , [ 0, y_arr( :, idx)' ], 'color', c.black, 'linewidth', 4 );
    p2.Color( 4 ) = alpha;
    scatter( x_arr( end, idx ), y_arr( end, idx  ),  600,  'markerfacecolor', c.blue, 'markeredgecolor', c.blue, 'MarkerFaceAlpha', alpha,'MarkerEdgeAlpha',alpha  )

end

Ntmp = 25;
alpha_arr = 0.3 * ones( 1, Ntmp  );
idx_arr   = 4800 + 20 * [1:Ntmp ];
for i = 1 : length( idx_arr )
    idx = idx_arr( i );
    alpha = alpha_arr( i );
    scatter( [ 0, x_arr( 1:end-1, idx  )' ] , [ 0, y_arr(1:end-1, idx )' ], 200, 'markerfacecolor', c.black, 'markeredgecolor', c.black, 'MarkerFaceAlpha', alpha,'MarkerEdgeAlpha',alpha  )
    p2 = plot( [ 0, x_arr( :, idx )' ] , [ 0, y_arr( :, idx)' ], 'color', c.black, 'linewidth', 4 );
    p2.Color( 4 ) = alpha;
    scatter( x_arr( end, idx ), y_arr( end, idx  ),  600,  'markerfacecolor', c.blue, 'markeredgecolor', c.blue, 'MarkerFaceAlpha', alpha,'MarkerEdgeAlpha',alpha  )

end


axis equal
title( 'Dynamic Movement Primitives', 'fontsize', fs )
set( gca, 'xlim', [-1.25, 1.75], 'ylim', [-0.5, 2.5], 'xtick', [ -1.0, 0.0, 1.0], 'ytick', [ 0.0, 1.0, 2.0], 'fontsize', fs ) 
ylb = ylabel( '$Y$ (m)', 'fontsize', fs );

subplot( 1, 2, 2 )
hold on
q_abs = cumsum( data_motor{ 1 }.q_arr , 1 );
x_arr = cumsum( cos( q_abs ), 1 );
y_arr = cumsum( sin( q_abs ), 1 );


Ntmp = 25;
alpha_arr = 0.3 * ones( 1, Ntmp  );
idx_arr   = 10 * [1:Ntmp ];
for i = 1 : length( idx_arr )
    idx = idx_arr( i );
    alpha = alpha_arr( i );
    scatter( [ 0, x_arr( 1:end-1, idx  )' ] , [ 0, y_arr(1:end-1, idx )' ], 200, 'markerfacecolor', c.black, 'markeredgecolor', c.black, 'MarkerFaceAlpha', alpha,'MarkerEdgeAlpha',alpha  )
    p2 = plot( [ 0, x_arr( :, idx )' ] , [ 0, y_arr( :, idx)' ], 'color', c.black, 'linewidth', 4 );
    p2.Color( 4 ) = alpha;
    scatter( x_arr( end, idx ), y_arr( end, idx  ),  600,  'markerfacecolor', c.orange, 'markeredgecolor', c.orange, 'MarkerFaceAlpha', alpha,'MarkerEdgeAlpha',alpha  )

end

alpha_arr = 0.3 * ones( 1, 4 );
idx_arr   = [ 3900, 3960, 4020, 4100 ];
for i = 1 : length( idx_arr )
    idx = idx_arr( i );
    alpha = alpha_arr( i );
    scatter( [ 0, x_arr( 1:end-1, idx  )' ] , [ 0, y_arr(1:end-1, idx )' ], 200, 'markerfacecolor', c.black, 'markeredgecolor', c.black, 'MarkerFaceAlpha', alpha,'MarkerEdgeAlpha',alpha  )
    p2 = plot( [ 0, x_arr( :, idx )' ] , [ 0, y_arr( :, idx)' ], 'color', c.black, 'linewidth', 4 );
    p2.Color( 4 ) = alpha;
    scatter( x_arr( end, idx ), y_arr( end, idx  ),  600,  'markerfacecolor', c.orange, 'markeredgecolor', c.orange, 'MarkerFaceAlpha', alpha,'MarkerEdgeAlpha',alpha  )

end


Ntmp = 25;
alpha_arr = 0.3 * ones( 1, Ntmp  );
idx_arr   = 5000 + 20 * [1:Ntmp ];
for i = 1 : length( idx_arr )
    idx = idx_arr( i );
    alpha = alpha_arr( i );
    scatter( [ 0, x_arr( 1:end-1, idx  )' ] , [ 0, y_arr(1:end-1, idx )' ], 200, 'markerfacecolor', c.black, 'markeredgecolor', c.black, 'MarkerFaceAlpha', alpha,'MarkerEdgeAlpha',alpha  )
    p2 = plot( [ 0, x_arr( :, idx )' ] , [ 0, y_arr( :, idx)' ], 'color', c.black, 'linewidth', 4 );
    p2.Color( 4 ) = alpha;
    scatter( x_arr( end, idx ), y_arr( end, idx  ),  600,  'markerfacecolor', c.orange, 'markeredgecolor', c.orange, 'MarkerFaceAlpha', alpha,'MarkerEdgeAlpha',alpha  )

end

axis equal
title( 'Elementary Dynamic Actions', 'fontsize', fs )
set( gca, 'xlim', [-1.25, 1.75] , 'ylim', [-0.5, 2.5], 'xtick', [ -1.0, 0.0, 1.0], 'ytick', [ 0.0, 1.0, 2.0], 'fontsize', fs ) 
xlb = xlabel( '$X$ (m)', 'fontsize', fs );
xlb.Position( 1 ) = xlb.Position( 1 ) - 2.1;
xlb.Position( 2 ) = xlb.Position( 2 ) - 0.0;


mySaveFig( gcf,  'discrete_and_rhythmic_joint2' )

%% (--) Discrete and Rhythmic Movements --- Task 1

% All data generated by "main_discrete_and_rhythmic.py"
clear data*
close all; clc; 
% ============================ Movement Primitives ==================================== %
% file_name1 = '../results/discrete_and_rhythmic_joint/movement/ctrl_joint_dmp.mat';
% file_name2 = '../results/discrete_and_rhythmic_joint/movement/dmp_goal_details.mat';
% data_move{ 1 }  = load( file_name1 );
% data_move{ 2 }  = load( file_name2 );

% =============================== Motor Primitives ==================================== %
file_name1 = '../results/discrete_and_rhythmic_task/motor/ctrl_task_imp.mat';
data_motor = load( file_name1 );

data_move{ 1 } = load( '../results/discrete_and_rhythmic_task/movement/ctrl_task_dmp.mat' );
data_move{ 2 } = load( '../results/discrete_and_rhythmic_task/movement/dmp_rhythmicx.mat' );
data_move{ 3 } = load( '../results/discrete_and_rhythmic_task/movement/dmp_rhythmicy.mat' );
data_move{ 4 } = load( '../results/discrete_and_rhythmic_task/movement/dmp_discrete.mat' );
data_move{ 5 } = load( '../results/discrete_and_rhythmic_task/movement/dmp_goal_details.mat' );
idx = 3000;
% Dynamic Movement Primitives
subplot( 2, 1, 1 )

hold on
plot( data_move{ 1 }.t_arr, data_move{ 5 }.g( 1, :), 'linewidth', 6, 'linestyle', ':', 'color', c.black )
plot( data_move{ 1 }.t_arr, data_move{ 5 }.g0( 1, : ), 'linewidth', 4, 'color', c.black );
plot( data_move{ 1 }.t_arr, data_move{ 1 }.p_arr( 1, : ), 'linewidth', 8, 'color', c.blue )
ylabel( '$X$ (m)', 'fontsize', fs )
legend( '$g(t)$', '$g_0$', 'location', 'northwest', 'fontsize', fs )
set( gca, 'xlim', [0, 12.0], 'xticklabel', {}, 'ylim', [-1.0, 1.0 ], 'fontsize', fs  )


% Elementary Dynamic Actions
subplot( 2, 1, 2 )
hold on
plot( data_motor.t_arr, data_motor.p_arr( 1, : ), 'linewidth', 8, 'color', c.orange )
plot( data_motor.t_arr, data_motor.p0_arr( 1, :), 'linewidth', 6, 'linestyle', ':', 'color', c.black )

set( gca, 'xlim', [0, 22.0], 'ylim', [0.0, 2.0 ], 'fontsize', fs  )
xlabel( '$t$ (sec)', 'fontsize', fs )
ylabel( '$X$ (m)', 'fontsize', fs )
legend( '','$p_{0,x}(t)$', 'location', 'northwest', 'fontsize', fs )
set( gca, 'xlim', [0, 12.0], 'ylim', [-1.0, 1.0 ], 'fontsize', fs  )

mySaveFig( gcf,  'discrete_and_rhythmic_task1' )

%% (--) Discrete and Rhythmic Movements --- Task 2

% All data generated by "main_discrete_and_rhythmic.py"
clear data*
close all; clc; 
% ============================ Movement Primitives ==================================== %
% file_name1 = '../results/discrete_and_rhythmic_joint/movement/ctrl_joint_dmp.mat';
% file_name2 = '../results/discrete_and_rhythmic_joint/movement/dmp_goal_details.mat';
% data_move{ 1 }  = load( file_name1 );
% data_move{ 2 }  = load( file_name2 );

% =============================== Motor Primitives ==================================== %
file_name1 = '../results/discrete_and_rhythmic_task/motor/ctrl_task_imp.mat';
data_motor = load( file_name1 );

data_move{ 1 } = load( '../results/discrete_and_rhythmic_task/movement/ctrl_task_dmp.mat' );
data_move{ 2 } = load( '../results/discrete_and_rhythmic_task/movement/dmp_rhythmicx.mat' );
data_move{ 3 } = load( '../results/discrete_and_rhythmic_task/movement/dmp_rhythmicy.mat' );
data_move{ 4 } = load( '../results/discrete_and_rhythmic_task/movement/dmp_discrete.mat' );
data_move{ 5 } = load( '../results/discrete_and_rhythmic_task/movement/dmp_goal_details.mat' );

% Dynamic Movement Primitives
subplot( 1, 2, 1 )
hold on
plot( data_move{ 1 }.p_arr( 1, 3000:end ) , data_move{ 1 }.p_arr( 2, 3000:end ) , 'linewidth', 8, 'color', c.blue )
title( 'Dynamic Movement Primitives', 'fontsize', fs )
axis equal
set( gca, 'xlim', [-1.15, 1.05], 'ylim', [-0.1, 2.1 ], 'fontsize', fs )
ylb = ylabel( '$Y$ (m)', 'fontsize', fs );


% Elementary Dynamic Actions
subplot( 1, 2, 2 )
hold on
plot( data_motor.p_arr( 1, 3000:end ) , data_motor.p_arr( 2, 3000:end ) , 'linewidth', 8, 'color', c.orange )
plot( data_motor.p0_arr( 1, 3000:end ) , data_motor.p0_arr( 2, 3000:end ) , 'linewidth', 4, 'linestyle', ':', 'color', c.black )

title( 'Elementary Dynamic Actions', 'fontsize', fs )
xlabel( '$X$ (m)', 'fontsize', fs )
legend( '', '$\mathbf{p}_{0}(t)$', 'location', 'northeast', 'fontsize', fs )
axis equal
set( gca, 'xlim', [-1.15, 1.05], 'ylim', [-0.1, 2.1 ], 'fontsize', fs )
xlb = xlabel( '$X$ (m)', 'fontsize', fs );
xlb.Position( 1 ) = xlb.Position( 1 ) - 1.5;
xlb.Position( 2 ) = xlb.Position( 2 ) - 0.0;


mySaveFig( gcf,  'discrete_and_rhythmic_task2' )



%% ==================================================================
%% (--) Obstacle Avoidance 
 clear data*; clc; close all;

 
mode = "BOTH"; 

% ============================ Movement Primitives ==================================== %
% Dynamic Movement Primitives
file_name1 = '../results/obstacle_avoidance/movement/ctrl_task_dmp.mat';
file_name2 = '../results/obstacle_avoidance/movement/dmpx.mat';
file_name3 = '../results/obstacle_avoidance/movement/dmpy.mat';

data_move{ 1 } = load( file_name1 );
data_move{ 2 } = load( file_name2 );
data_move{ 3 } = load( file_name3 );

% =============================== Motor Primitives ==================================== %
% Elementary Dynamic Actions
file_name1 = '../results/obstacle_avoidance/motor/ctrl_task_imp.mat';
file_name2 = '../results/obstacle_avoidance/motor/ctrl_task_imp2.mat';
data_motor{ 1 } = load( file_name1 );
data_motor{ 2 } = load( file_name2 );

subplot( 2, 2, [1,3] )
hold on
if mode == "MOVEMENT" || mode == "BOTH"
    plot( data_move{1}.p_arr( 1, : ), data_move{1}.p_arr( 2, : ), 'linewidth', 8, 'color', c.blue )
end
if mode == "MOTOR" || mode == "BOTH"    
    plot( data_motor{1}.p_arr( 1, : ), data_motor{1}.p_arr( 2, : ), 'linewidth', 8, 'color', c.orange )
end

plot( data_motor{1}.p0_arr( 1, :), data_motor{1}.p0_arr( 2, :),   'linewidth', 4, 'linestyle', '-.', 'color', c.black )
scatter( data_motor{1}.p0i( 1 ), data_motor{1}.p0i( 2 ), 400, 'o', 'markerfacecolor', c.black, 'markeredgecolor', c.black )
scatter( data_motor{1}.p0f( 1 ), data_motor{1}.p0f( 2 ), 400, 'o', 'markerfacecolor', c.black, 'markeredgecolor', c.black )

scatter( 0.5 *( data_motor{1}.p0i( 1 ) + data_motor{1}.p0f( 1 ) ), 0.5 *( data_motor{1}.p0i( 2 ) + data_motor{1}.p0f( 2 ) ) ...
        , 1000, 'o', 'markerfacecolor', c.grey, 'markeredgecolor', c.black, 'linewidth', 3 )
set( gca, 'xlim', [-.4, .40001], 'ylim', [ 0.1, 1.9],  'fontsize', fs )
text( -0.3 + 0.5 *( data_motor{1}.p0i( 1 ) + data_motor{1}.p0f( 1 ) ), 0.5 *( data_motor{1}.p0i( 2 ) + data_motor{1}.p0f( 2 ) ), 'Obstacle' , 'fontsize', fs)
text( data_motor{1}.p0i( 1 )-0.25, data_motor{1}.p0i( 2 ), 'Start $\mathbf{p}_i$' , 'fontsize', fs)
text( data_motor{1}.p0f( 1 )-0.25, data_motor{1}.p0f( 2 ), 'Goal $\mathbf{g}$'   , 'fontsize', fs )

% daspect([1 1 1])
if mode == "MOVEMENT"
    legend( 'Dynamic Movement Primitives', 'fontsize', fs , 'location', 'southwest' )
elseif mode == "MOTOR"
    legend( 'Elementary Dynamic Actions', 'fontsize', fs , 'location', 'southwest' )
else
    legend( 'Dynamic Movement Primitives', 'Elementary Dynamic Actions', 'fontsize', fs , 'location', 'southwest' )
end    
xlabel( '$X$ (m)', 'fontsize', fs )
ylabel( '$Y$ (m)', 'fontsize', fs )


if mode == "MOVEMENT" || mode == "BOTH" 
    subplot( 2, 2, 2)
    hold on
    plot( data_motor{1}.p0_arr( 1, :), data_motor{1}.p0_arr( 2, :),   'linewidth', 4, 'linestyle', '-.', 'color', c.black )
    scatter( 0.5 *( data_motor{1}.p0i( 1 ) + data_motor{1}.p0f( 1 ) ), 0.5 *( data_motor{1}.p0i( 2 ) + data_motor{1}.p0f( 2 ) ) ...
        , 1000, 'o', 'markerfacecolor', c.grey, 'markeredgecolor', c.black, 'linewidth', 3 )
    set( gca, 'xlim', [-.4, .40001], 'ylim', [ 0.3, 1.8],  'fontsize', 30 )
    % Get the x, y position of the joints 
    q_abs = cumsum( data_move{ 1 }.q_arr , 1 );
    x_arr = cumsum( cos( q_abs ), 1 );
    y_arr = cumsum( sin( q_abs ), 1 );

    alpha_arr = [1.0, 0.3, 0.3, 1.0];
    idx_arr   = [100, 1400, 2000, 3000];
    lw        = [ 4, 2, 2, 4];
    for i = 1 : length( alpha_arr )
        idx = idx_arr( i );
        alpha = alpha_arr( i );
        scatter( [ 0; x_arr( 1:end-1 ,idx ) ] , [ 0; y_arr( 1:end-1, idx) ], 200, 'markerfacecolor', c.black, 'markeredgecolor', c.black, 'MarkerFaceAlpha', alpha,'MarkerEdgeAlpha',alpha  )
        p2 = plot( [ 0; x_arr( :, idx ) ] , [ 0; y_arr( :, idx) ], 'color', c.black, 'linewidth', lw( i ) );
        p2.Color( 4 ) = alpha;
        scatter( x_arr( end, idx ), y_arr( end, idx ),  600,  'markerfacecolor', c.blue, 'markeredgecolor', c.blue, 'MarkerFaceAlpha', alpha,'MarkerEdgeAlpha',alpha  )

    end

    plot( data_move{1}.p_arr( 1, : ), data_move{1}.p_arr( 2, : ), 'linewidth', 6, 'color', c.blue )

   
    set( gca, 'xlim', [-0.2, 0.2] , 'ylim', [0.0, 2.0], 'xticklabel', {}, 'yticklabel', {} , 'fontsize', fs )
    axis equal    
    
    ylb = ylabel( '$Y$ (m)', 'fontsize', fs );
%     ylb.Position( 1 ) = ylb.Position( 1 ) - 0.2;
%     ylb.Position( 2 ) = ylb.Position( 2 ) - 1.50;

end
    
if mode == "MOTOR" || mode == "BOTH" 
    subplot( 2, 2, 4)
    hold on
    plot( data_motor{1}.p0_arr( 1, : ), data_motor{1}.p0_arr( 2, : ),  'linewidth', 2, 'linestyle', '-.', 'color', c.black )
    scatter( 0.5 *( data_motor{1}.p0i( 1 ) + data_motor{1}.p0f( 1 ) ), 0.5 *( data_motor{1}.p0i( 2 ) + data_motor{1}.p0f( 2 ) ) ...
        , 1000, 'o', 'markerfacecolor', c.grey, 'markeredgecolor', c.black, 'linewidth', 3 )
    set( gca, 'xlim', [-.4, .40001], 'ylim', [ 0.3, 1.8],  'fontsize', 30 )

    % Get the x, y position of the joints 
    q_abs = cumsum( data_motor{ 1 }.q_arr , 1 );
    x_arr = cumsum( cos( q_abs ), 1 );
    y_arr = cumsum( sin( q_abs ), 1 );

    alpha_arr = [1.0, 0.3, 0.3, 1.0];
    idx_arr   = [100, 1700, 2300, 5000];
    lw        = [ 4, 2, 2, 4];    
    for i = 1 : length( alpha_arr )
        idx = idx_arr( i );
        alpha = alpha_arr( i );
        scatter( [ 0; x_arr( 1:end-1 ,idx ) ] , [ 0; y_arr( 1:end-1, idx) ], 200, 'markerfacecolor', c.black, 'markeredgecolor', c.black, 'MarkerFaceAlpha', alpha,'MarkerEdgeAlpha',alpha  )
        p2 = plot( [ 0; x_arr( :, idx ) ] , [ 0; y_arr( :, idx) ], 'color', c.black, 'linewidth', lw( i ) );
        p2.Color( 4 ) = alpha;
        scatter( x_arr( end, idx ), y_arr( end, idx ),  600,  'markerfacecolor', c.orange ,'markeredgecolor', c.orange, 'MarkerFaceAlpha', alpha,'MarkerEdgeAlpha',alpha  )

    end
    plot( data_motor{1}.p_arr( 1, : ), data_motor{1}.p_arr( 2, : ), 'linewidth', 6, 'color', c.orange )


   
    set( gca, 'xlim', [-0.2, 0.2] , 'ylim', [0.0, 2.0], 'xticklabel', {}, 'yticklabel', {} )
    axis equal
    xlabel( '$X$ (m)', 'fontsize', fs )
    ylabel( '$Y$ (m)', 'fontsize', fs )        
end    

mySaveFig( gcf, 'obstacle' )

%% ==================================================================
%% (--) Unexpected Contact #1
% All data generated from "main_unexpected_collision.py"
clear data*; clc; close all;

% ======================================================================== %
% Dynamic Movement Primitives
% Without Obstacle
file_name_mov_wo_obs1 = '../results/unexpected_contact/movement/without_obstacle/dmpx.mat';
file_name_mov_wo_obs2 = '../results/unexpected_contact/movement/without_obstacle/dmpy.mat';
file_name_mov_wo_obs3 = '../results/unexpected_contact/movement/without_obstacle/ctrl_task_dmp.mat';

data_move_wo_obs{ 1 } = load( file_name_mov_wo_obs1 );
data_move_wo_obs{ 2 } = load( file_name_mov_wo_obs2 );
data_move_wo_obs{ 3 } = load( file_name_mov_wo_obs3 );

% With_obstacle_no_PD
file_name_mov_w_obs_woPD_1 = '../results/unexpected_contact/movement/with_obstacle_no_PD/dmpx.mat';
file_name_mov_w_obs_woPD_2 = '../results/unexpected_contact/movement/with_obstacle_no_PD/dmpy.mat';
file_name_mov_w_obs_woPD_3 = '../results/unexpected_contact/movement/with_obstacle_no_PD/ctrl_task_dmp.mat';

data_move_w_obs_woPD{ 1 } = load( file_name_mov_w_obs_woPD_1 );
data_move_w_obs_woPD{ 2 } = load( file_name_mov_w_obs_woPD_2 );
data_move_w_obs_woPD{ 3 } = load( file_name_mov_w_obs_woPD_3 );

% With obstacle PD
file_name_mov_w_obs_wPD_1 = '../results/unexpected_contact/movement/with_obstacle_joint_PD/dmpx.mat';
file_name_mov_w_obs_wPD_2 = '../results/unexpected_contact/movement/with_obstacle_joint_PD/dmpy.mat';
file_name_mov_w_obs_wPD_3 = '../results/unexpected_contact/movement/with_obstacle_joint_PD/ctrl_task_dmp.mat';
% file_name_mov_w_obs_wPD_4 = '../results/unexpected_contact/movement/with_obstacle_joint_PD/ctrl_task_imp.mat';

data_move_w_obs_wPD{ 1 } = load( file_name_mov_w_obs_wPD_1 );
data_move_w_obs_wPD{ 2 } = load( file_name_mov_w_obs_wPD_2 );
data_move_w_obs_wPD{ 3 } = load( file_name_mov_w_obs_wPD_3 );
% data_move_w_obs_wPD{ 4 } = load( file_name_mov_w_obs_wPD_4 );

% ======================================================================== %
% Elementary Dynamic Actions
% Without Obstacle

% With Obstacle no modulation
file_name_motor_w_obs_wo_mod = '../results/unexpected_contact/motor/with_obstacle_no_mod/ctrl_task_imp.mat';
data_motor_w_obs_wo_mod{ 1 } = load( file_name_motor_w_obs_wo_mod );

% With Obstacle modulation
file_name_motor_w_obs_w_mod = '../results/unexpected_contact/motor/with_obstacle_mod_Lmax_1p0/ctrl_task_imp_modulated.mat';
data_motor_w_obs_w_mod{ 1 } = load( file_name_motor_w_obs_w_mod );

clear file_name*

start = data_motor_w_obs_w_mod{1}.p0i;
goal  = data_motor_w_obs_w_mod{1}.p0f;

if mode == "MOVEMENT" || mode == "BOTH" 
    
   
    % =====================================================
    % ==== SUBPLOT #21
    % With Obstacle with PD, at hit
    subplot( 2, 3, 1 )

    
    hold on
    plot( [ start( 1 ), goal( 1 )], [ start(2), goal( 2 ) ], 'linestyle', '--', 'linewidth', 3, 'color', c.black ) 
    
    q_arr = data_move_w_obs_woPD{3}.q_actual_arr;
    
    q_abs = cumsum( q_arr , 1 );
    x_arr = cumsum( cos( q_abs ), 1 );
    y_arr = cumsum( sin( q_abs ), 1 );      
    
    alpha_arr = [0.2, 0.5, 1.0];
    idx_arr   = [100, 320, 500];
    lw        = [4, 2, 4 ];
    for i = 1 : length( alpha_arr )
        idx = idx_arr( i );
        alpha = alpha_arr( i );
        scatter( [ 0; x_arr( 1:end-1, idx ) ] , [ 0; y_arr( 1:end-1, idx ) ], 200, 'markerfacecolor', c.black, 'markeredgecolor', c.black, 'MarkerFaceAlpha', alpha,'MarkerEdgeAlpha',alpha  )
        p2 = plot( [ 0; x_arr( :, idx ) ] , [ 0; y_arr( :, idx) ], 'color', c.black, 'linewidth', lw( i ) );
        p2.Color( 4 ) = alpha;
        scatter( x_arr( end, idx ), y_arr( end, idx ),  600,  'markerfacecolor', c.blue, 'markeredgecolor', c.blue, 'MarkerFaceAlpha', alpha,'MarkerEdgeAlpha',alpha  )

    end    
    
    scatter(  0.0, 1.2, 2300, "square", 'markerfacecolor', [0.4, 0.4, 0.4], 'markeredgecolor', [0.4,0.4,0.4], 'MarkerFaceAlpha', 1.0 ,'MarkerEdgeAlpha', 1.0 )    
    text( -1.0, goal( 2 ), 'Goal $\mathbf{g}$'   , 'fontsize', 0.80*fs )    
    text( -1.0, start( 2 ), 'Start $\mathbf{p}_{i}$'   , 'fontsize', 0.80*fs )        

    
    axis equal        
    set( gca, 'xlim', [-1.1, 1.1] , 'ylim', [-0.2, 2.0], 'xticklabel', {}, 'yticklabel', {} )
    ylb = ylabel( '$Y$ (m)', 'fontsize', fs );
    ylb.Position( 1 ) = ylb.Position( 1 )-0.2;    
    scatter( start( 1 ), start( 2 ), 200, 'square', 'markerfacecolor', c.black, 'markeredgecolor', c.black, 'markerfacealpha', 1.0 )
    scatter( goal( 1 ), goal( 2 ), 200, 'square', 'markerfacecolor', c.black, 'markeredgecolor', c.black, 'markerfacealpha', 1.0 )        
      
    
    
    % =====================================================
    % ==== SUBPLOT #2    
    subplot( 2, 3, 2 )
    
    q_arr = data_move_w_obs_woPD{3}.q_actual_arr;
    
    hold on
    plot( [ start( 1 ), goal( 1 )], [ start(2), goal( 2 ) ], 'linestyle', '--', 'linewidth', 3, 'color', c.black ) 
    
    q_abs = cumsum( q_arr , 1 );
    x_arr = cumsum( cos( q_abs ), 1 );
    y_arr = cumsum( sin( q_abs ), 1 );    
    
    alpha_arr = [1.0, 0.5, 0.5];
    idx_arr   = [500, 900, 1050];
    lw        = [4, 2, 2, 2];
    for i = 1 : length( alpha_arr )
        idx = idx_arr( i );
        alpha = alpha_arr( i );
        scatter( [ 0; x_arr( 1:end-1, idx ) ] , [ 0; y_arr( 1:end-1, idx ) ], 200, 'markerfacecolor', c.black, 'markeredgecolor', c.black, 'MarkerFaceAlpha', alpha,'MarkerEdgeAlpha',alpha  )
        p2 = plot( [ 0; x_arr( :, idx ) ] , [ 0; y_arr( :, idx) ], 'color', c.black, 'linewidth', lw( i ) );
        p2.Color( 4 ) = alpha;
        scatter( x_arr( end, idx ), y_arr( end, idx ),  600,  'markerfacecolor', c.blue, 'markeredgecolor', c.blue, 'MarkerFaceAlpha', alpha,'MarkerEdgeAlpha',alpha  )

    end    
    scatter(  0.0, 1.2, 2300, "square", 'markerfacecolor', [0.4, 0.4, 0.4], 'markeredgecolor', [0.4,0.4,0.4], 'MarkerFaceAlpha', 0.2 ,'MarkerEdgeAlpha', 0.2 )    
    scatter( -0.8, 1.2, 2300, "square", 'markerfacecolor', [0.4, 0.4, 0.4], 'markeredgecolor', [0.4,0.4,0.4], 'MarkerFaceAlpha', 1.0 ,'MarkerEdgeAlpha', 1.0 )    

    axis equal        
    set( gca, 'xlim', [-1.1, 1.1] , 'ylim', [-0.2, 2.0], 'xticklabel', {} ,'yticklabel', {} )
    xlb = xlabel( '$X$ (m)', 'fontsize', fs );
    xlb.Position( 2 ) = xlb.Position( 2 )-0.2;
    
    scatter( start( 1 ), start( 2 ), 200, 'square', 'markerfacecolor', c.black, 'markeredgecolor', c.black, 'markerfacealpha', 1.0 )
    scatter( goal( 1 ), goal( 2 ), 200, 'square', 'markerfacecolor', c.black, 'markeredgecolor', c.black, 'markerfacealpha', 1.0 )        

    % =====================================================
    % ==== SUBPLOT #3      
    % With Obstacle with PD, at hit    
    subplot( 2, 3, 3 )

    q_arr = data_move_w_obs_wPD{3}.q_actual_arr;

    
    q_abs = cumsum( q_arr , 1 );
    x_arr = cumsum( cos( q_abs ), 1 );
    y_arr = cumsum( sin( q_abs ), 1 );    
        
    
    hold on
    plot( [ start( 1 ), goal( 1 )], [ start(2), goal( 2 ) ], 'linestyle', '--', 'linewidth', 3, 'color', c.black )     
    alpha_arr = [1.0, 0.5, 0.5, 1.0];
    idx_arr   = [500, 1700, 2000, 3500];
    lw        = [4,2,2,4];
    for i = 1 : length( alpha_arr )
        idx = idx_arr( i );
        alpha = alpha_arr( i );
        scatter( [ 0; x_arr( 1:end-1, idx ) ] , [ 0; y_arr( 1:end-1, idx ) ], 200, 'markerfacecolor', c.black, 'markeredgecolor', c.black, 'MarkerFaceAlpha', alpha,'MarkerEdgeAlpha',alpha  )
        p2 = plot( [ 0; x_arr( :, idx ) ] , [ 0; y_arr( :, idx) ], 'color', c.black, 'linewidth', lw( i ) );
        p2.Color( 4 ) = alpha;
        scatter( x_arr( end, idx ), y_arr( end, idx ),  600,  'markerfacecolor', c.blue, 'markeredgecolor', c.blue, 'MarkerFaceAlpha', alpha,'MarkerEdgeAlpha',alpha  )
    end            
    
    scatter(  0.0, 1.2, 2300, "square", 'markerfacecolor', [0.4, 0.4, 0.4], 'markeredgecolor', [0.4,0.4,0.4], 'MarkerFaceAlpha', 0.2 ,'MarkerEdgeAlpha', 0.2 )    
    scatter( -0.8, 1.2, 2300, "square", 'markerfacecolor', [0.4, 0.4, 0.4], 'markeredgecolor', [0.4,0.4,0.4], 'MarkerFaceAlpha', 1.0 ,'MarkerEdgeAlpha', 1.0 )    

%     annotation('textarrow', [0.82, 0.795], [0.795, 0.795], 'Linewidth',2, 'color', [0.3, 0.3, 0.3]) 
%     annotation('textarrow', [0.82, 0.795]-0.205, [0.795, 0.795], 'Linewidth',2, 'color', [0.3, 0.3, 0.3]) 
%     annotation('textarrow', [0.705, 0.74], [0.77, 0.77], 'Linewidth',4, 'headstyle', 'vback1', 'headwidth', 15, 'color', [0.3, 0.3, 0.3]) 
    

    axis equal        
    set( gca, 'xlim', [-1.1, 1.1] , 'ylim', [-0.2, 2.0], 'xticklabel', {}, 'yticklabel', {} )
    
    scatter( start( 1 ), start( 2 ), 200, 'square', 'markerfacecolor', c.black, 'markeredgecolor', c.black, 'markerfacealpha', 1.0 )
    scatter( goal( 1 ), goal( 2 ), 200, 'square', 'markerfacecolor', c.black, 'markeredgecolor', c.black, 'markerfacealpha', 1.0 )        


    subplot( 2, 3, [4:6] )
    hold on
    
    plot( data_move_w_obs_woPD{3}.t_arr, data_move_w_obs_woPD{3}.p_command( 2, : ), 'color', c.black, 'linewidth', 4, 'linestyle', '--' )
    plot( data_move_w_obs_woPD{3}.t_arr, data_move_w_obs_woPD{3}.p_arr( 2, :), 'color', c.blue, 'linestyle', ':', 'linewidth', 8 )   
    plot( data_move_w_obs_wPD{3}.t_arr, data_move_w_obs_wPD{3}.p_arr( 2, :), 'color', c.blue, 'linestyle', '-', 'linewidth', 8 )   
    set( gca, 'xlim', [ 0, 3 ], 'xtick', 0:1:3, 'fontsize', 0.8*fs, 'ylim', [0, 2]  )
% 	yline( start(2), 'linewidth', 1, 'linestyle', '--');
%     yline(  goal(2), 'linewidth', 1, 'linestyle', '--' );
%     

    xlabel( '$t$ (sec)', 'fontsize', fs )
    ylabel( '$Y$ (m)', 'fontsize', fs )
    get( gca, 'ylim' )

    legend( '$\mathbf{p}_{des}(t)$', 'A, B', 'A, C', 'location', 'southeast', 'fontsize', fs )
    sgtitle( 'Dynamic Movement Primitives', 'fontsize', 1.2*fs) 

    mySaveFig( gcf, 'unexpected_contact_movement' )
    
end   
    
if mode == "MOTOR" || mode == "BOTH" 
    figure( )
    
    subplot( 2, 3, 1 )
    
    hold on
    plot( [ start( 1 ), goal( 1 )], [ start(2), goal( 2 ) ], 'linestyle', '--', 'linewidth', 3, 'color', c.black ) 
    
    q_arr = data_motor_w_obs_wo_mod{1}.q_arr;
    
    q_abs = cumsum( q_arr , 1 );
    x_arr = cumsum( cos( q_abs ), 1 );
    y_arr = cumsum( sin( q_abs ), 1 );    
    
    alpha_arr = [0.2, 0.5, 1.0];
    idx_arr   = [100, 350, 600];
    lw        = [ 4, 2, 4 ];
        
    for i = 1 : length( alpha_arr )
        idx = idx_arr( i );
        alpha = alpha_arr( i );
        scatter( [ 0; x_arr( 1:end-1, idx ) ] , [ 0; y_arr( 1:end-1, idx ) ], 200, 'markerfacecolor', c.black, 'markeredgecolor', c.black, 'MarkerFaceAlpha', alpha,'MarkerEdgeAlpha',alpha  )
        p2 = plot( [ 0; x_arr( :, idx ) ] , [ 0; y_arr( :, idx) ], 'color', c.black, 'linewidth', lw( i ) );
        p2.Color( 4 ) = alpha;
        scatter( x_arr( end, idx ), y_arr( end, idx ),  600,  'markerfacecolor', c.orange, 'markeredgecolor', c.orange, 'MarkerFaceAlpha', alpha,'MarkerEdgeAlpha',alpha  )

    end    
    
    scatter( 0.0, 1.2, 2300, "square", 'markerfacecolor', [0.4, 0.4, 0.4], 'markeredgecolor', [0.4,0.4,0.4], 'MarkerFaceAlpha', 1.0 ,'MarkerEdgeAlpha', 1.0 )    
    scatter( start( 1 ), start( 2 ), 200, 'square', 'markerfacecolor', c.black, 'markeredgecolor', c.black, 'markerfacealpha', 1.0 )
    scatter( goal( 1 ), goal( 2 ), 200, 'square', 'markerfacecolor', c.black, 'markeredgecolor', c.black, 'markerfacealpha', 1.0 )        
    text( -1.0, goal( 2 ), 'Goal $\mathbf{g}$'   , 'fontsize', 0.80*fs )    
    text( -1.0, start( 2 ), 'Start $\mathbf{p}_{i}$'   , 'fontsize', 0.80*fs )        

    
    axis equal    
    set( gca, 'xlim', [-1.1, 1.1] , 'ylim', [-0.2, 2.0], 'xticklabel', {}, 'yticklabel', {} )
 
    ylb = ylabel( '$Y$ (m)', 'fontsize', fs );
    ylb.Position( 1 ) = ylb.Position( 1 )-0.2;    
         
    
    subplot( 2, 3, 2 )
    
    hold on
    plot( [ start( 1 ), goal( 1 )], [ start(2), goal( 2 ) ], 'linestyle', '--', 'linewidth', 3, 'color', c.black ) 
    
    q_arr = data_motor_w_obs_wo_mod{1}.q_arr;
    
    q_abs = cumsum( q_arr , 1 );
    x_arr = cumsum( cos( q_abs ), 1 );
    y_arr = cumsum( sin( q_abs ), 1 );    
    
    alpha_arr = [1.0, 0.5, 0.5, 1.0];
    idx_arr   = [600, 1500, 1700, 2500];
    lw        = [ 4, 2, 2, 4 ];
    
    for i = 1 : length( alpha_arr )
        idx = idx_arr( i );
        alpha = alpha_arr( i );
        scatter( [ 0; x_arr( 1:end-1, idx ) ] , [ 0; y_arr( 1:end-1, idx ) ], 200, 'markerfacecolor', c.black, 'markeredgecolor', c.black, 'MarkerFaceAlpha', alpha,'MarkerEdgeAlpha',alpha  )
        p2 = plot( [ 0; x_arr( :, idx ) ] , [ 0; y_arr( :, idx) ], 'color', c.black, 'linewidth', lw( i ) );
        p2.Color( 4 ) = alpha;
        scatter( x_arr( end, idx ), y_arr( end, idx ),  600,  'markerfacecolor', c.orange, 'markeredgecolor', c.orange, 'MarkerFaceAlpha', alpha,'MarkerEdgeAlpha',alpha  )

    end    
    
    scatter(  0.0, 1.2, 2300, "square", 'markerfacecolor', [0.4, 0.4, 0.4], 'markeredgecolor', [0.4,0.4,0.4], 'MarkerFaceAlpha', 0.2 ,'MarkerEdgeAlpha', 0.2 )    
    scatter( -0.8, 1.2, 2300, "square", 'markerfacecolor', [0.4, 0.4, 0.4], 'markeredgecolor', [0.4,0.4,0.4], 'MarkerFaceAlpha', 1.0 ,'MarkerEdgeAlpha', 1.0 )    
    scatter( start( 1 ), start( 2 ), 200, 'square', 'markerfacecolor', c.black, 'markeredgecolor', c.black, 'markerfacealpha', 1.0 )
    scatter( goal( 1 ), goal( 2 ), 200, 'square', 'markerfacecolor', c.black, 'markeredgecolor', c.white, 'markerfacealpha', 0.3 )

    xlb = xlabel( '$X$ (m)', 'fontsize', fs );
    xlb.Position( 2 ) = xlb.Position( 2 )-0.2;
        
%     text( -0.9, goal( 2 ), 'Goal $\mathbf{g}$'   , 'fontsize', 0.6*fs )    
    
    axis equal    
    set( gca, 'xlim', [-1.1, 1.1] , 'ylim', [-0.2, 2.0], 'xticklabel', {}, 'yticklabel', {} )
    
    subplot( 2, 3, 3 )
    
    hold on
    plot( [ start( 1 ), goal( 1 )], [ start(2), goal( 2 ) ], 'linestyle', '--', 'linewidth', 3, 'color', c.black ) 
    
    q_arr = data_motor_w_obs_w_mod{1}.q_arr;
    
    q_abs = cumsum( q_arr , 1 );
    x_arr = cumsum( cos( q_abs ), 1 );
    y_arr = cumsum( sin( q_abs ), 1 );    
    
    alpha_arr = [1.0, 0.4, 0.4, 1.0];
    idx_arr   = [600, 1600, 2000, 3500];
    lw        = [ 4, 2, 2, 4 ];
    for i = 1 : length( alpha_arr )
        idx = idx_arr( i );
        alpha = alpha_arr( i );
        scatter( [ 0; x_arr( 1:end-1, idx ) ] , [ 0; y_arr( 1:end-1, idx ) ], 200, 'markerfacecolor', c.black, 'markeredgecolor', c.black, 'MarkerFaceAlpha', alpha,'MarkerEdgeAlpha',alpha  )
        p2 = plot( [ 0; x_arr( :, idx ) ] , [ 0; y_arr( :, idx) ], 'color', c.black, 'linewidth', lw( i ) );
        p2.Color( 4 ) = alpha;
        scatter( x_arr( end, idx ), y_arr( end, idx ),  600,  'markerfacecolor', c.orange, 'markeredgecolor', c.orange, 'MarkerFaceAlpha', alpha,'MarkerEdgeAlpha',alpha  )

    end    
    
    scatter(  0.0, 1.2, 2300, "square", 'markerfacecolor', [0.4, 0.4, 0.4], 'markeredgecolor', [0.4,0.4,0.4], 'MarkerFaceAlpha', 0.2 ,'MarkerEdgeAlpha', 0.2 )    
    scatter( -0.8, 1.2, 2300, "square", 'markerfacecolor', [0.4, 0.4, 0.4], 'markeredgecolor', [0.4,0.4,0.4], 'MarkerFaceAlpha', 1.0 ,'MarkerEdgeAlpha', 1.0 )    

    scatter( start( 1 ), start( 2 ), 200, 'square', 'markerfacecolor', c.black, 'markeredgecolor', c.black, 'markerfacealpha', 1.0 )
    scatter( goal( 1 ), goal( 2 ), 200, 'square', 'markerfacecolor', c.black, 'markeredgecolor', c.white, 'markerfacealpha', 0.3 )
%     text( -0.9, goal( 2 ), 'Goal $\mathbf{g}$'   , 'fontsize', 0.6*fs )    
%     text( -0.9, start( 2 ), 'Start $\mathbf{p}_{i}$'   , 'fontsize', 0.6*fs )        

         
    axis equal    
    set( gca, 'xlim', [-1.1, 1.1] , 'ylim', [-0.2, 2.0], 'xticklabel', {}, 'yticklabel', {} )


    subplot( 2, 3, 4:6 )
    hold on
    
    plot( data_motor_w_obs_wo_mod{1}.t_arr, data_motor_w_obs_wo_mod{1}.p0_arr( 2, :), 'color', c.black, 'linestyle', '--', 'linewidth', 4 )   
    plot( data_motor_w_obs_wo_mod{1}.t_arr, data_motor_w_obs_wo_mod{1}.p_arr( 2, :), 'color', c.orange, 'linestyle', ':', 'linewidth', 8 )   
    plot( data_motor_w_obs_w_mod{1}.t_arr, data_motor_w_obs_w_mod{1}.p_arr( 2, :), 'color', c.orange, 'linestyle', '-', 'linewidth', 8 )   
    set( gca, 'xlim', [ 0, 3 ], 'xtick', 0:1:3, 'fontsize', fs, 'ylim', [0, 2]  )
% 	yline( start(2), 'linewidth', 1, 'linestyle', '--');
%     yline(  goal(2), 'linewidth', 1, 'linestyle', '--' );
%     

    xlabel( '$t$ (sec)', 'fontsize', 1.0*fs )
    ylabel( 'Y (m)', 'fontsize', 1.0*fs )
    get( gca, 'ylim' )

    legend( '$\mathbf{p}_{0}(t)$', 'E, F', 'E, G', 'location', 'southeast', 'fontsize', fs )
    
    sgtitle( 'Elementary Dynamic Actions', 'fontsize', 1.2*fs)

    mySaveFig( gcf, 'unexpected_contact_motor' )

end

%% (--) Unexpected Contact #2
% All data generated from "main_unexpected_collision.py"
close all; clc;
% Plotting the lambda value multiplied on the 

% With Obstacle modulation
file_name_motor_w_obs_w_mod = '../results/unexpected_contact/motor/with_obstacle_mod_Lmax_2p5/ctrl_task_imp_modulated.mat';
data_motor_w_obs_w_mod{ 1 } = load( file_name_motor_w_obs_w_mod );


t_arr = data_motor_w_obs_w_mod{1}.t_arr;
lambda = data_motor_w_obs_w_mod{1}.my_lambda_arr;

U = data_motor_w_obs_w_mod{1}.pot_arr;
K = data_motor_w_obs_w_mod{1}.kin_arr;

subplot( 2, 1, 1 )
hold on
plot( t_arr, lambda, 'color', c.orange, 'linestyle', '-', 'linewidth', 8 )   
set( gca, 'xlim', [0, 3], 'ytick', [ 0., 1.0 ] , 'xtick', [0:1:3], 'fontsize', fs, 'xticklabel', {} )
xline( 0.6 )

ylabel( '$\lambda$ (-)', 'fontsize', fs )
subplot( 2, 1, 2 )
hold on

plot( t_arr, U.*lambda + K, 'color', c.orange, 'linestyle', '-', 'linewidth', 8 )   
set( gca, 'xlim', [0, 3], 'ylim', [ 0., 2.5 ] ,'xtick', [0:1:3] , 'ytick', [0.0,1.25,2.5],'fontsize', fs )

xline( 0.6 )

xlabel( '$t$ (sec)', 'fontsize', fs )
ylabel( '$\mathcal{L}_c$ (J)', 'fontsize', fs )

mySaveFig( gcf, 'unexpected_contact_motor_lambda' )
